<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Coca Coder]]></title>
  <link href="http://cocacoder.cc/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://cocacoder.cc/"/>
  <updated>2016-08-21T15:49:33+08:00</updated>
  <id>http://cocacoder.cc/</id>
  <author>
    <name><![CDATA[Mallven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Usage of Synchronized in Java]]></title>
    <link href="http://cocacoder.cc/blog/2015/04/15/how-synchronized-lock-works/"/>
    <updated>2015-04-15T11:40:31+08:00</updated>
    <id>http://cocacoder.cc/blog/2015/04/15/how-synchronized-lock-works</id>
    <content type="html"><![CDATA[<h3>1. How to use synchronized keyword</h3>

<p>In Java, we have three ways to use <code>synchronized</code> to keep thread safe</p>

<blockquote><p>synchronize the class<br/>
synchronize the object<br/>
synchronize a private object</p></blockquote>

<!--more-->


<h3>2. Examples of How to use synchronized</h3>

<p>We will write some codes to illustrate how synchronized works</p>

<p>```java
   public class SynchronizedUsageTest{</p>

<pre><code>private Object syncObject = new Object();
private static int i = 0;

//no lock
public  void incWithNoLock(){
    System.out.println("incWithNoLock start");
    System.out.println("incWithNoLock i="+i++);
    System.out.println("incWithNoLock end");
}

//synchronize object
public synchronized void incWithSynchronizedObject(){
    System.out.println("incWithSynchronizedObject start");
    System.out.println("incWithSynchronizedObject i="+i++);
    System.out.println("incWithSynchronizedObject end");
}

//synchronize object
public  void incWithSynchronizedObject2(){
    synchronized (this) {
        System.out.println("incWithSynchronizedObject2 start");
        System.out.println("incWithSynchronizedObject2 i="+i++);
        System.out.println("incWithSynchronizedObject2 end");
    }
}

//synchronize class
public static synchronized void incWithSynchronizedClass(){
    System.out.println("incWithSynchronizedClass start");
    System.out.println("incWithSynchronizedClass i="+i++);
    System.out.println("incWithSynchronizedClass end");
}

//synchronize class 2
public void incWithSynchronizedClass2(){
    synchronized (SynchronizedUsageTest.class) {
        System.out.println("incWithSynchronizedClass2 start");
        System.out.println("incWithSynchronizedClass2 i="+i++);
        System.out.println("incWithSynchronizedClass2 end");
    }
}


//synchronize private object 2
public void incWithSynchronizedPrivateObject(){

    synchronized (syncObject) {
        System.out.println("incWithSynchronizedPrivateObject start");
        System.out.println("incWithSynchronizedPrivateObject i="+i++);
        System.out.println("incWithSynchronizedPrivateObject end");
    }

}

//test the effect of synchronized of class
public void testSynchronizeClass(){
    incWithSynchronizedClass();
    incWithSynchronizedClass2();
}

//test the effect of synchronized of object
public void testSynchronizeObject(){
    incWithSynchronizedObject();
    incWithSynchronizedObject2();
}

//test the effect of synchronized of object and Class
public void testSynchronizeObjectAndClass(){
    incWithSynchronizedObject();
    incWithSynchronizedClass();
}

//test the effect of synchronized of private object and Class
public void testSynchronizePrivateObjectAndClass(){
    incWithSynchronizedPrivateObject();
    incWithSynchronizedClass();
}

//test the effect of synchronized of private object and Class
public void testSynchronizePrivateObjectAndObject(){
    incWithSynchronizedPrivateObject();
    incWithSynchronizedObject();
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.1 Test the effect of add synchronized to class</h4>

<p>Result:
```java</p>

<blockquote><p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=0<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedClass2 start<br/>
incWithSynchronizedClass2 i=1<br/>
incWithSynchronizedClass2 end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=2<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedClass2 start<br/>
incWithSynchronizedClass2 i=3<br/>
incWithSynchronizedClass2 end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=4<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedClass2 start<br/>
incWithSynchronizedClass2 i=5<br/>
incWithSynchronizedClass2 end <br/>
<code>``
From the result we can konw that the codes are executed one by one in serial, so</code>static synchronized<code>and</code>synchronized(xxx.class)` have the same effect.</p></blockquote>

<h4>2.2 test the effect of add synchronized to object</h4>

<p>Result:<br/>
```java</p>

<blockquote><p>incWithSynchronizedObject i=0<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedObject2 start<br/>
incWithSynchronizedObject2 i=1<br/>
incWithSynchronizedObject2 end</p>

<p>incWithSynchronizedObject start<br/>
incWithSynchronizedObject i=2<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedObject2 start<br/>
incWithSynchronizedObject2 i=3<br/>
incWithSynchronizedObject2 end</p>

<p>incWithSynchronizedObject start<br/>
incWithSynchronizedObject i=4<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedObject2 start<br/>
incWithSynchronizedObject2 i=5<br/>
incWithSynchronizedObject2 end<br/>
<code>``
From the result we can know that the codes are executed one by one in serial, so</code>synchronized<code>and</code>synchronized(this)` have the same effect.</p></blockquote>

<h4>2.3 test the effect of add  synchronized to object and Class</h4>

<p>Result: <br/>
```java</p>

<blockquote><p>incWithSynchronizedObject start<br/>
incWithSynchronizedObject i=0<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedObject start<br/>
incWithSynchronizedClass i=1<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedObject i=2<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedObject start<br/>
incWithSynchronizedClass i=3<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedObject i=4<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=5<br/>
incWithSynchronizedClass end<br/>
```
From the result we can see that the codes are executed in a random way not in serial, so we can get the result of synchronized of object and class can not keep thread safe.</p></blockquote>

<h4>2.4 test the effect of add synchronized to private object and Class</h4>

<p>Result:<br/>
```java</p>

<blockquote><p>incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedPrivateObject i=0<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=1<br/>
incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedPrivateObject i=2<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedClass i=3<br/>
incWithSynchronizedClass end</p>

<p>incWithSynchronizedPrivateObject i=4<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedClass start<br/>
incWithSynchronizedClass i=5<br/>
incWithSynchronizedClass end <br/>
```
From the result we can see that the codes are executed in a random way not in serial, so we can get the result of synchronized of class and private object can not keep thread safe.</p></blockquote>

<h4>2.5 test the effect of add synchronized to private object and object</h4>

<p>Result:<br/>
```java</p>

<blockquote><p>incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedPrivateObject i=0<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedObject start<br/>
incWithSynchronizedObject i=1<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedPrivateObject i=2<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedObject start<br/>
incWithSynchronizedPrivateObject start<br/>
incWithSynchronizedObject i=3<br/>
incWithSynchronizedObject end</p>

<p>incWithSynchronizedPrivateObject i=4<br/>
incWithSynchronizedPrivateObject end</p>

<p>incWithSynchronizedObject start<br/>
incWithSynchronizedObject i=5<br/>
incWithSynchronizedObject end<br/>
```</p></blockquote>

<p>From the result we can see that the codes are executed in a random way not in serial, so we can get the result of synchronized of object and private object can not keep thread safe.</p>

<h4>2.6 What will happen  if has no locks</h4>

<p>Result:<br/>
```java</p>

<blockquote><p>incWithNoLock start<br/>
incWithNoLock i=0<br/>
incWithNoLock end<br/>
incWithNoLock start<br/>
incWithNoLock i=1<br/>
incWithNoLock end</p>

<p>incWithNoLock start</p>

<p>incWithNoLock i=2<br/>
incWithNoLock end<br/>
```
Wowooooooo.. zzzZZZZZ</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How HashMap Works]]></title>
    <link href="http://cocacoder.cc/blog/2015/03/16/how-hashmap-works/"/>
    <updated>2015-03-16T13:57:42+08:00</updated>
    <id>http://cocacoder.cc/blog/2015/03/16/how-hashmap-works</id>
    <content type="html"><![CDATA[<h3>1.The Structure of HashMap</h3>

<p>As we know,all structures of object in Java are based on array and reference,HashMap is same too. A HashMap structure consist of two parts:Array and LinkList(Figure 1).</p>

<p><img src="/images/blog/2015-03/20150316-hashmap-structure.png" alt="HashMap Structure" /></p>

<!--more-->


<p>When we put a new item to a HashMap, First of all, HashMap will use hash algorithm to calculate the hashcode of the given key. Then use this hashcode to mod the capacity of the array to get the index of the array which will store the reference of this object. If the space of this index was already used by other object, HashMap will use linklist structure to store these object, the new one will be added before to the old one, And the  first one&rsquo;s reference is stored in this specified index of the array.</p>

<p>fragments of HashMap source code<br/>
Array:<br/>
<code>java
 transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;
</code></p>

<p>LinkList Node:</p>

<p>```java
 Entry(int h, K k, V v, Entry&lt;K,V> n) {</p>

<pre><code>      value = v;
      next = n;//point to the next entry 
      key = k;
      hash = h;
</code></pre>

<p>   }
```</p>

<h3>2.How hash function find the bucket location of the given key</h3>

<p>From figure 1 ,we can know that If we want to find an object from HashMap,we must use the hashcode of the key to find the bucket’s location in the entry array.This is how HashMap in Java does:<br/>
```java
static int indexFor(int h, int length) {</p>

<pre><code>    // assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";
    return h &amp; (length-1);
</code></pre>

<p> }
```
h &amp; (length-1) means h mod (length-1), but bits operation is more efficient than mod operation.<br/>
but we notice that there is a line of comment “length must be a non-zero power of 2”,why power of 2? and why (length-1) not length.</p>

<h4>2.1  why is length-1?</h4>

<p>Okay, because h &amp; (length-1) equals h % length.</p>

<h4>2.2  why the length must be power of 2</h4>

<p>If we want to get a value from HashMap efficiently,the ideal situation is that every bucket only has one entry,so we can get the object directly without  traversing the linklist.  So we need the value are stored in the array evenly. But how HashMap make a hashcode evenly? The implementation in Java:</p>

<h5>1.First,choose a suitable length to hash table array:</h5>

<p>We will do a contrast experiment to find the advantange of using the power of 2 as the length of array.</p>

<p>condition 1 : <code>length = 2^4 = 16, hash = 13 or hash = 12</code></p>

<p><img src="/images/blog/2015-03/20150316-hashmap-hash-to-index-1.png" alt="contrast experiment" /></p>

<p>condition 2 : <code>length = 15, hash = 13 or hash = 12</code></p>

<p><img src="/images/blog/2015-03/20150316-hashmap-hash-to-index-2.png" alt="contrast experiment" /></p>

<p>From figure 2 we can find that when we use 15 as the length of array hash=13 and hash=12 will get the same index=12, this is hash collision, beacuse if we use 2<sup>N</sup> as the length, we can guarantee length-1 has more 1 bits data in the binary representation than no use 2<sup>N</sup> as the length. So use power of 2 as length can reduce hash collision between two different hashcode.</p>

<h5>2.Second : bit shift</h5>

<p><code>java
h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);
return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);
</code>
These two lines  can ensure that every change of bit of hashcode can affect the final result of bucket index calculating.</p>

<h3>3.The capacity of HashMap</h3>

<h4>3.1 How many entries can be hold by an HashMap? only restricted by the system memory?</h4>

<p>The answer is no, the maximum capacity of a HashMap is 2<sup>30</sup>, this value is defined in the class file of HashMap <br/>
<code>java
static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;
</code></p>

<h4>3.2 What is the default capacity of HashMap?</h4>

<p>The default capactity is 2<sup>4</sup>, we can specify the initial capacity in either of the constructors with arguments, but must be a power of two. If we specify a capacity not a power of two, HashMap will find a number of a power of two closet to the specified capacity  as the final capacity.<br/>
<code>java
// Find a power of 2 &gt;= toSize
int capacity = roundUpToPowerOf2(toSize);
</code></p>

<h4>3.3 How HashMap to resize</h4>

<p>HashMap has a variable named loadFactor to regulate when it needs to resize, if the amount of entries holded by HashMap over capacity*loadFactor, the resize function will be called. <br/>
<code>java
threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);
</code>
```java
if ((size >= threshold) &amp;&amp; (null != table[bucketIndex])) {</p>

<pre><code>        resize(2 * table.length);
        hash = (null != key) ? hash(key) : 0;
        bucketIndex = indexFor(hash, table.length);
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
