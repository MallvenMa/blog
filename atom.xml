<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YungHua.Ma]]></title>
  <link href="http://blog.zarue.com//atom.xml" rel="self"/>
  <link href="http://blog.zarue.com//"/>
  <updated>2015-01-04T09:21:57+08:00</updated>
  <id>http://blog.zarue.com//</id>
  <author>
    <name><![CDATA[YungHua.Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[netbeans debug hotspot]]></title>
    <link href="http://blog.zarue.com//blog/2014/06/21/netbeans-debug-hotspot/"/>
    <updated>2014-06-21T18:02:59+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/06/21/netbeans-debug-hotspot</id>
    <content type="html"><![CDATA[<p>学习JVM的过程中肯定不能少了对JVM的调试，进行就学习一下怎样用Netbeans调试Hotspot。</p>

<h4>编译过程</h4>

<p>环境：</p>

<blockquote><p>Ubuntu12.04<br/>
OpenJdk 7u<br/>
Netbeans7.0.1(c/c++)</p></blockquote>

<p>1.安装编译所需要的工具。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">ant</span> <span class="n">mercurial</span> <span class="n">gawk</span> <span class="n">g</span><span class="o">++</span> <span class="n">libcups2</span><span class="o">-</span><span class="n">dev</span> <span class="n">libasound2</span><span class="o">-</span><span class="n">dev</span> <span class="n">libfreetype6</span><span class="o">-</span><span class="n">dev</span> <span class="n">libx11</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxt</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxext</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxrender</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxtst</span><span class="o">-</span><span class="n">dev</span> <span class="n">libfontconfig1</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2.clone openjdk</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hg</span> <span class="n">clone</span> <span class="nl">http:</span><span class="c1">//hg.openjdk.java.net/jdk7u/jdk7u/ jdk7u</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.进入jdk7u目录，执行下面的脚本下载openjdk源代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">get_source</span><span class="o">.</span><span class="na">sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.开始编译OpenJdk,为了方便写个小脚本(build.sh),该脚本的Gist的地址:<a href="https://gist.github.com/zarue/0c6dd39d3e271888f02d#file-1-build-sh">查看</a>,将该脚本放在jdk7u目录下面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'><span class="n">unset</span> <span class="n">JAVA_HOME</span>
</span><span class='line'><span class="n">export</span> <span class="n">LANG</span><span class="o">=</span><span class="n">C</span>
</span><span class='line'><span class="err">#必须开启，</span><span class="n">jdk</span><span class="err">在编译过程中会联网下载一些</span><span class="n">openjdk</span><span class="err">本身未包含的第三方库</span>
</span><span class='line'><span class="n">export</span> <span class="n">ALLOW_DOWNLOADS</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">USE_PRECOMPILED_HEADER</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">SKIP_DEBUG_BUILD</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'><span class="n">export</span> <span class="n">SKIP_FASTDEBUG_BUILD</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">DEBUG_NAME</span><span class="o">=</span><span class="n">debug</span>
</span><span class='line'><span class="err">#</span><span class="n">ALT_BOOTDIR</span> <span class="err">是你本机</span><span class="n">jdk</span><span class="err">的目录</span>
</span><span class='line'><span class="n">export</span> <span class="n">ALT_BOOTDIR</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">6.0</span><span class="n">_45</span>
</span><span class='line'><span class="n">source</span> <span class="n">jdk</span><span class="o">/</span><span class="n">make</span><span class="o">/</span><span class="n">jdk_generic_profile</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'><span class="n">make</span> <span class="n">sanity</span> <span class="o">&amp;&amp;</span> <span class="n">make</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.执行build.sh 开始编译过程，大约耗时20-30分分钟</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">build</span><span class="o">.</span><span class="na">sh</span>
</span></code></pre></td></tr></table></div></figure>


<h4>可能遇到的问题:</h4>

<p>1、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">.</span><span class="na">src</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">vm</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">interfaceSupport</span><span class="o">.</span><span class="na">hpp</span><span class="o">:</span><span class="mi">430</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span> <span class="nl">error:</span> <span class="s">&quot;__LEAF&quot;</span> <span class="n">redefined</span> <span class="o">[-</span><span class="n">Werror</span><span class="o">]</span>
</span><span class='line'><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">cdefs</span><span class="o">.</span><span class="na">h</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span> <span class="nl">note:</span> <span class="k">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">location</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">definition</span>
</span></code></pre></td></tr></table></div></figure>


<p>有两种解决方法: <br/>
1.参考这个：<a href="http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/a6eef545f1a2">http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/a6eef545f1a2</a>  <br/>
2.这个问题在jdk7u中已经修复，直接使用jdk7u版本的源码就可以了。</p>

<p>2、&#8221;*** This OS is not supported:&ldquo; &lsquo;uname -a&rsquo;; exit 1;
解决方法:<br/>
uname -r<br/>
#查看当前的内核版本：3.11.0-15-generic<br/>
找到下面的文件：/hotspot/make/linux/Makefile <br/>
#在这行最后加上当前的内核版本3.11%，<br/>
 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 2.7% 3.11%</p>

<p>3、Error occurred during initialization of VM java/lang/NoClassDefFoundError: java/lang/invoke/AdapterMethodHandle  解决方法:<br/>
这是因为编译Openjdk的所用的Jdk版本不符合要求导致的，我这里用的<code>jdk1.6.0_45</code><br/>
如果还遇到其它问题可以自行Google,一般都能解决。</p>

<h4>使用Netbeans调试</h4>

<p>1.安装Netbeans7.0.1 我尝试了8.0，7.4 都不能正常进行Debug，最后换了7.0.1就正常了，这里仅供参考。<br/>
2.新建一个项目，选择“基于现有源代码的C/C++项目”，在“源代码文件夹目录”选择openjdk下的hotspot目录，“选择配置模式”中选择“定制”。</p>

<p>3.下一步，“使用现有的makefile”：选择hotspot/make目录下的Makefile文件。</p>

<p>4.构建：“构建命令”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">MAKE</span><span class="o">}</span> <span class="o">-</span><span class="n">f</span> <span class="n">Makefile</span> <span class="n">clean</span> <span class="n">jvmg</span> <span class="n">ALT_BOOTDIR</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">6.0</span><span class="n">_45</span> <span class="n">ARCH_DATA_MODEL</span><span class="o">=</span><span class="mi">64</span> <span class="n">LANG</span><span class="o">=</span><span class="n">C</span>   <span class="n">ZIP_DEBUGINFO_FILES</span><span class="o">=</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p> 如果你是64位系统那么需要指定ARCH_DATA_MODEL=64，另外如果不指定ZIP_DEBUGINFO_FILES=0，那么需要在编译完成后到jvmg目录下面执行unzip libjvm.diz 解压出调试需要的符号信息。否则将不能进行调试。</p>

<p>5.运行-运行命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;/home/cheney/soft/jdk7u/hotspot/build/linux/linux_amd64_compiler2/jvmg/gamma&quot;</span>   <span class="o">-</span><span class="nl">XX:</span><span class="n">StopInterpreterAt</span><span class="o">=</span><span class="mi">1</span> <span class="n">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>-XX:StopInterpreterAt=1的作用是当遇到序号为<n>的字节码指令时，便会中断程序执行，进入断点调试，但是我不指定这个参数也照样可以进行调试。Test 是我自己写的测试类，以后如果想调试哪个类就在这里更换。</p>

<p>6.运行-环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LD_LIBRARY_PATH</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">soft</span><span class="o">/</span><span class="n">jdk7u</span><span class="o">/</span><span class="n">hotspot</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">linux_amd64_compiler2</span><span class="o">/</span><span class="n">jvmg</span>
</span><span class='line'><span class="n">JAVA_HOME</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">soft</span><span class="o">/</span><span class="n">jdk7u</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">linux</span><span class="o">-</span><span class="n">amd64</span><span class="o">/</span><span class="n">j2sdk</span><span class="o">-</span><span class="n">image</span>
</span><span class='line'><span class="n">CLASSPATH</span><span class="o">=</span><span class="n">$</span><span class="o">{</span><span class="n">JAVA_HOME</span><span class="o">}/</span><span class="n">lib</span><span class="o">/</span><span class="n">dt</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">$</span><span class="o">{</span><span class="n">JAVA_HOME</span><span class="o">}/</span><span class="n">lib</span><span class="o">/</span><span class="n">tools</span><span class="o">.</span><span class="na">jar</span><span class="o">:/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这里要把Test所在的目录添加到环境CLASSPATH里面。</p>

<p>7.接下来就是等待编译过程了，编译完成之后就可以进行调试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 Java对象创建[初始化]]]></title>
    <link href="http://blog.zarue.com//blog/2014/06/15/java-object-create-2/"/>
    <updated>2014-06-15T10:01:00+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/06/15/java-object-create-2</id>
    <content type="html"><![CDATA[<p>上一篇文章简单介绍了类的加载和连接阶段，今天来简单看一下类的初始化过程。<br/>
还是使用上文的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span> <span class="n">claszz</span> <span class="o">=</span> <span class="n">clt</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Animal&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="o">(</span><span class="n">Animal</span><span class="o">)</span><span class="n">claszz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>newInstance</code>的native方法在:src/share/native/sun/reflect/NativeAccessors.c</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span> <span class="nf">Java_sun_reflect_NativeConstructorAccessorImpl_newInstance0</span>
</span><span class='line'><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jclass</span> <span class="n">unused</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">c</span><span class="o">,</span> <span class="n">jobjectArray</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="nf">JVM_NewInstanceFromConstructor</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><code>JVM_NewInstanceFromConstructor</code>在jvm.cpp 中的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jobject</span><span class="o">,</span> <span class="n">JVM_NewInstanceFromConstructor</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">c</span><span class="o">,</span> <span class="n">jobjectArray</span> <span class="n">args0</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper</span><span class="o">(</span><span class="s">&quot;JVM_NewInstanceFromConstructor&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">oop</span> <span class="n">constructor_mirror</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'><span class="n">objArrayHandle</span> <span class="nf">args</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">objArrayOop</span><span class="o">(</span><span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">args0</span><span class="o">)));</span>
</span><span class='line'><span class="n">oop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">Reflection:</span><span class="o">:</span><span class="n">invoke_constructor</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="n">jobject</span> <span class="n">res</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_vm_object_alloc</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_vm_object_alloc</span><span class="o">(</span><span class="nl">JavaThread:</span><span class="o">:</span><span class="n">current</span><span class="o">(),</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>第4行：创建构造方法参数数组。 <br/>
第5行：<code>invoke_constructor(...)</code>位于/src/share/vm/runtime/reflection.cpp,这个方法包含了对象的创建过程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">Reflection:</span><span class="o">:</span><span class="n">invoke_constructor</span><span class="o">(</span><span class="n">oop</span> <span class="n">constructor_mirror</span><span class="o">,</span> <span class="n">objArrayHandle</span> <span class="n">args</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">oop</span> <span class="n">mirror</span>             <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">clazz</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">slot</span>               <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">slot</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">override</span>          <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">override</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">objArrayHandle</span> <span class="nf">ptypes</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">objArrayOop</span><span class="o">(</span><span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">parameter_types</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instanceKlassHandle</span> <span class="nf">klass</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">java_lang_Class:</span><span class="o">:</span><span class="n">as_klassOop</span><span class="o">(</span><span class="n">mirror</span><span class="o">));</span>
</span><span class='line'>  <span class="n">methodOop</span> <span class="n">m</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">method_with_idnum</span><span class="o">(</span><span class="n">slot</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">THROW_MSG_0</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_InternalError</span><span class="o">(),</span> <span class="s">&quot;invoke&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">methodHandle</span> <span class="nf">method</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">method</span><span class="o">-&gt;</span><span class="n">name</span><span class="o">()</span> <span class="o">==</span> <span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">object_initializer_name</span><span class="o">(),</span> <span class="s">&quot;invalid constructor&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Make sure klass gets initialize</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">-&gt;</span><span class="n">initialize</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create new instance (the receiver)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">-&gt;</span><span class="n">check_valid_for_instantiation</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">allocate_instance_handle</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ignore result from call and return receiver</span>
</span><span class='line'>  <span class="n">invoke</span><span class="o">(</span><span class="n">klass</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">receiver</span><span class="o">,</span> <span class="n">override</span><span class="o">,</span> <span class="n">ptypes</span><span class="o">,</span> <span class="n">T_VOID</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">receiver</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接从为对象分配内存开始看src/share/vm/oops/instanceKlass.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handle</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">allocate_instance_handle</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续看:<code>allocate_instance(...)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceOop</span> <span class="nl">instanceKlass:</span><span class="o">:</span><span class="n">allocate_instance</span><span class="o">(</span><span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">has_finalizer_flag</span> <span class="o">=</span> <span class="n">has_finalizer</span><span class="o">();</span> <span class="c1">// Query before possible GC</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">size_helper</span><span class="o">();</span>  <span class="c1">// Query before forming handle.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">KlassHandle</span> <span class="nf">h_k</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">as_klassOop</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instanceOop</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="n">instanceOop</span><span class="o">)</span><span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">obj_allocate</span><span class="o">(</span><span class="n">h_k</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">has_finalizer_flag</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">RegisterFinalizersAtInit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">register_finalizer</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第9行:<code>i = (instanceOop)CollectedHeap::obj_allocate(h_k, size, CHECK_NULL);</code>位于collectedHeap.inline.hpp中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">obj_allocate</span><span class="o">(</span><span class="n">KlassHandle</span> <span class="n">klass</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">debug_only</span><span class="o">(</span><span class="n">check_for_valid_allocation_state</span><span class="o">());</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_gc_active</span><span class="o">(),</span> <span class="s">&quot;Allocation during gc not allowed&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;int won&#39;t convert to size_t&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">common_mem_allocate_init</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">post_allocation_setup_obj</span><span class="o">(</span><span class="n">klass</span><span class="o">,</span> <span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">check_for_bad_heap_word_value</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">oop</span><span class="o">)</span><span class="n">obj</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下<code>common_mem_allocate_init(size, false, CHECK_NULL);</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">common_mem_allocate_init</span><span class="o">(</span><span class="n">size_t</span> <span class="n">size</span><span class="o">,</span> <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">common_mem_allocate_noinit</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">init_obj</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续看<code>common_mem_allocate_noinit(...)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">common_mem_allocate_noinit</span><span class="o">(</span><span class="n">size_t</span> <span class="n">size</span><span class="o">,</span> <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Clear unhandled oops for memory allocation.  Memory allocation might</span>
</span><span class='line'>  <span class="c1">// not take out a lock if from tlab, so clear here.</span>
</span><span class='line'>  <span class="n">CHECK_UNHANDLED_OOPS_ONLY</span><span class="o">(</span><span class="n">THREAD</span><span class="o">-&gt;</span><span class="n">clear_unhandled_oops</span><span class="o">();)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="n">guarantee</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="s">&quot;Should not allocate with exception pending&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>  <span class="c1">// caller does a CHECK_0 too</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We may want to update this, is_noref objects might not be allocated in TLABs.</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UseTLAB</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">allocate_from_tlab</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">assert</span><span class="o">(!</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">,</span>
</span><span class='line'>             <span class="s">&quot;Unexpected exception, will result in uninitialized storage&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">mem_allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                          <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                          <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>                                          <span class="o">&amp;</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span>
</span><span class='line'>      <span class="n">check_for_non_bad_heap_word_value</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span><span class='line'>    <span class="k">assert</span><span class="o">(!</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">,</span>
</span><span class='line'>           <span class="s">&quot;Unexpected exception, will result in uninitialized storage&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// -XX:+HeapDumpOnOutOfMemoryError and -XX:OnOutOfMemoryError support</span>
</span><span class='line'>    <span class="n">report_java_out_of_memory</span><span class="o">(</span><span class="s">&quot;Java heap space&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_resource_exhausted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_resource_exhausted</span><span class="o">(</span>
</span><span class='line'>        <span class="n">JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR</span> <span class="o">|</span> <span class="n">JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Java heap space&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">THROW_OOP_0</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">out_of_memory_error_java_heap</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// -XX:+HeapDumpOnOutOfMemoryError and -XX:OnOutOfMemoryError support</span>
</span><span class='line'>    <span class="n">report_java_out_of_memory</span><span class="o">(</span><span class="s">&quot;GC overhead limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_resource_exhausted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_resource_exhausted</span><span class="o">(</span>
</span><span class='line'>        <span class="n">JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR</span> <span class="o">|</span> <span class="n">JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;GC overhead limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">THROW_OOP_0</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">out_of_memory_error_gc_overhead_limit</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第15行，如果启用了UseTLAB则优先在TLAB上分配：allocate_from_tlab(&hellip;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">allocate_from_tlab</span><span class="o">(</span><span class="n">Thread</span><span class="o">*</span> <span class="n">thread</span><span class="o">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">UseTLAB</span><span class="o">,</span> <span class="s">&quot;should use UseTLAB&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">thread</span><span class="o">-&gt;</span><span class="n">tlab</span><span class="o">().</span><span class="na">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// Otherwise...</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">allocate_from_tlab_slow</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在TLAB分配失败则调用<code>allocate_from_tlab_slow(...)</code>，该方法会重新计算TLAB的大小，然后重新创建一个新的TLAB用于分配该对象。 <br/>
如果<code>allocate_from_tlab_slow(...)</code>也没成功，则调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">mem_allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                          <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                          <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>                                          <span class="o">&amp;</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在共享内存区域分配内存。在该区域分配内存需要加锁，所以速度要比在TLAB上分配效率低一些。该方法位于：/src/share/vm/gc_implementation/parallelScavenge/parallelScavengeHeap.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">eapWord</span><span class="o">*</span> <span class="nl">ParallelScavengeHeap:</span><span class="o">:</span><span class="n">mem_allocate</span><span class="o">(</span>
</span><span class='line'>                                     <span class="n">size_t</span> <span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span> <span class="n">is_tlab</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span><span class="o">*</span> <span class="n">gc_overhead_limit_was_exceeded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">SafepointSynchronize:</span><span class="o">:</span><span class="n">is_at_safepoint</span><span class="o">(),</span> <span class="s">&quot;should not be at safepoint&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="nl">Thread:</span><span class="o">:</span><span class="n">current</span><span class="o">()</span> <span class="o">!=</span> <span class="o">(</span><span class="n">Thread</span><span class="o">*)</span><span class="nl">VMThread:</span><span class="o">:</span><span class="n">vm_thread</span><span class="o">(),</span> <span class="s">&quot;should not be in vm thread&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="n">Heap_lock</span><span class="o">-&gt;</span><span class="n">owned_by_self</span><span class="o">(),</span> <span class="s">&quot;this thread should not own the Heap_lock&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// In general gc_overhead_limit_was_exceeded should be false so</span>
</span><span class='line'>  <span class="c1">// set it so here and reset it to true only if the gc time</span>
</span><span class='line'>  <span class="c1">// limit is being exceeded as checked below.</span>
</span><span class='line'>  <span class="o">*</span><span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">uint</span> <span class="n">loop_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">uint</span> <span class="n">gc_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// We don&#39;t want to have multiple collections for a single filled generation.</span>
</span><span class='line'>    <span class="c1">// To prevent this, each thread tracks the total_collections() value, and if</span>
</span><span class='line'>    <span class="c1">// the count has changed, does not do a new collection.</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// The collection count must be read only while holding the heap lock. VM</span>
</span><span class='line'>    <span class="c1">// operations also hold the heap lock during collections. There is a lock</span>
</span><span class='line'>    <span class="c1">// contention case where thread A blocks waiting on the Heap_lock, while</span>
</span><span class='line'>    <span class="c1">// thread B is holding it doing a collection. When thread A gets the lock,</span>
</span><span class='line'>    <span class="c1">// the collection count has already changed. To prevent duplicate collections,</span>
</span><span class='line'>    <span class="c1">// The policy MUST attempt allocations during the same period it reads the</span>
</span><span class='line'>    <span class="c1">// total_collections() value!</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">MutexLocker</span> <span class="nf">ml</span><span class="o">(</span><span class="n">Heap_lock</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gc_count</span> <span class="o">=</span> <span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">total_collections</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// (1) If the requested object is too large to easily fit in the</span>
</span><span class='line'>      <span class="c1">//     young_gen, or</span>
</span><span class='line'>      <span class="c1">// (2) If GC is locked out via GCLocker, young gen is full and</span>
</span><span class='line'>      <span class="c1">//     the need for a GC already signalled to GCLocker (done</span>
</span><span class='line'>      <span class="c1">//     at a safepoint),</span>
</span><span class='line'>      <span class="c1">// ... then, rather than force a safepoint and (a potentially futile)</span>
</span><span class='line'>      <span class="c1">// collection (attempt) for each allocation, try allocation directly</span>
</span><span class='line'>      <span class="c1">// in old_gen. For case (2) above, we may in the future allow</span>
</span><span class='line'>      <span class="c1">// TLAB allocation directly in the old gen.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">is_tlab</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">size</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">eden_space</span><span class="o">()-&gt;</span><span class="n">capacity_in_words</span><span class="o">(</span><span class="nl">Thread:</span><span class="o">:</span><span class="n">current</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">old_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="nl">GC_locker:</span><span class="o">:</span><span class="n">is_active_and_needs_gc</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// GC is locked out. If this is a TLAB allocation,</span>
</span><span class='line'>        <span class="c1">// return NULL; the requestor will retry allocation</span>
</span><span class='line'>        <span class="c1">// of an idividual object at a time.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">is_tlab</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If this thread is not in a jni critical section, we stall</span>
</span><span class='line'>        <span class="c1">// the requestor until the critical section has cleared and</span>
</span><span class='line'>        <span class="c1">// GC allowed. When the critical section clears, a GC is</span>
</span><span class='line'>        <span class="c1">// initiated by the last thread exiting the critical section; so</span>
</span><span class='line'>        <span class="c1">// we retry the allocation sequence from the beginning of the loop,</span>
</span><span class='line'>        <span class="c1">// rather than causing more, now probably unnecessary, GC attempts.</span>
</span><span class='line'>        <span class="n">JavaThread</span><span class="o">*</span> <span class="n">jthr</span> <span class="o">=</span> <span class="nl">JavaThread:</span><span class="o">:</span><span class="n">current</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">jthr</span><span class="o">-&gt;</span><span class="n">in_critical</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">MutexUnlocker</span> <span class="nf">mul</span><span class="o">(</span><span class="n">Heap_lock</span><span class="o">);</span>
</span><span class='line'>          <span class="nl">GC_locker:</span><span class="o">:</span><span class="n">stall_until_clear</span><span class="o">();</span>
</span><span class='line'>          <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">CheckJNICalls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fatal</span><span class="o">(</span><span class="s">&quot;Possible deadlock due to allocating while&quot;</span>
</span><span class='line'>                  <span class="s">&quot; in jni critical section&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Generate a VM operation</span>
</span><span class='line'>      <span class="n">VM_ParallelGCFailedAllocation</span> <span class="nf">op</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">,</span> <span class="n">gc_count</span><span class="o">);</span>
</span><span class='line'>      <span class="nl">VMThread:</span><span class="o">:</span><span class="n">execute</span><span class="o">(&amp;</span><span class="n">op</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Did the VM operation execute? If so, return the result directly.</span>
</span><span class='line'>      <span class="c1">// This prevents us from looping until time out on requests that can</span>
</span><span class='line'>      <span class="c1">// not be satisfied.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">prologue_succeeded</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">assert</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_in_or_null</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()),</span>
</span><span class='line'>          <span class="s">&quot;result not in heap&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If GC was locked out during VM operation then retry allocation</span>
</span><span class='line'>        <span class="c1">// and/or stall as necessary.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">gc_locked</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">assert</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">,</span> <span class="s">&quot;must be NULL if gc_locked() is true&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="o">;</span>  <span class="c1">// retry and/or stall as necessary</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Exit the loop if the gc time limit has been exceeded.</span>
</span><span class='line'>        <span class="c1">// The allocation must have failed above (&quot;result&quot; guarding</span>
</span><span class='line'>        <span class="c1">// this path is NULL) and the most recent collection has exceeded the</span>
</span><span class='line'>        <span class="c1">// gc overhead limit (although enough may have been collected to</span>
</span><span class='line'>        <span class="c1">// satisfy the allocation).  Exit the loop so that an out-of-memory</span>
</span><span class='line'>        <span class="c1">// will be thrown (return a NULL ignoring the contents of</span>
</span><span class='line'>        <span class="c1">// op.result()),</span>
</span><span class='line'>        <span class="c1">// but clear gc_overhead_limit_exceeded so that the next collection</span>
</span><span class='line'>        <span class="c1">// starts with a clean slate (i.e., forgets about previous overhead</span>
</span><span class='line'>        <span class="c1">// excesses).  Fill op.result() with a filler object so that the</span>
</span><span class='line'>        <span class="c1">// heap remains parsable.</span>
</span><span class='line'>        <span class="kd">const</span> <span class="n">bool</span> <span class="n">limit_exceeded</span> <span class="o">=</span> <span class="n">size_policy</span><span class="o">()-&gt;</span><span class="n">gc_overhead_limit_exceeded</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">const</span> <span class="n">bool</span> <span class="n">softrefs_clear</span> <span class="o">=</span> <span class="n">collector_policy</span><span class="o">()-&gt;</span><span class="n">all_soft_refs_clear</span><span class="o">();</span>
</span><span class='line'>        <span class="k">assert</span><span class="o">(!</span><span class="n">limit_exceeded</span> <span class="o">||</span> <span class="n">softrefs_clear</span><span class="o">,</span> <span class="s">&quot;Should have been cleared&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">limit_exceeded</span> <span class="o">&amp;&amp;</span> <span class="n">softrefs_clear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="n">size_policy</span><span class="o">()-&gt;</span><span class="n">set_gc_overhead_limit_exceeded</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">PrintGCDetails</span> <span class="o">&amp;&amp;</span> <span class="n">Verbose</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">gclog_or_tty</span><span class="o">-&gt;</span><span class="n">print_cr</span><span class="o">(</span><span class="s">&quot;ParallelScavengeHeap::mem_allocate: &quot;</span>
</span><span class='line'>              <span class="s">&quot;return NULL because gc_overhead_limit_exceeded is set&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">fill_with_object</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">(),</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The policy object will prevent us from looping forever. If the</span>
</span><span class='line'>    <span class="c1">// time spent in gc crosses a threshold, we will bail out.</span>
</span><span class='line'>    <span class="n">loop_count</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">QueuedAllocationWarningCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="o">(</span><span class="n">loop_count</span> <span class="o">%</span> <span class="n">QueuedAllocationWarningCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">warning</span><span class="o">(</span><span class="s">&quot;ParallelScavengeHeap::mem_allocate retries %d times \n\t&quot;</span>
</span><span class='line'>              <span class="s">&quot; size=%d %s&quot;</span><span class="o">,</span> <span class="n">loop_count</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span> <span class="o">?</span> <span class="s">&quot;(TLAB)&quot;</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先在young_gen 分配，如果young 分配失败，则触发一次GC，然后重新尝试从young上分配，如果再分配失败，则从old 上分配。<br/>
Java对象初始化并分配内存的过程基本就是这样了。这个过程中的很多细节我也还没有弄明白，接下来弄明白了再补过来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 Java对象创建[加载和连接]]]></title>
    <link href="http://blog.zarue.com//blog/2014/06/14/java-object-create-1/"/>
    <updated>2014-06-14T08:53:49+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/06/14/java-object-create-1</id>
    <content type="html"><![CDATA[<p>Java对象的生命周期可以分为：加载，验证，准备，解析，初始化，使用，卸载 八个阶段。其中验证，准备，解析又被统称为连接，今天主要是简单看一下加载和连接，下一篇文章讲初始化。<br/>
<img src="http://blog.zarue.com//images/blog/2014-06/20140614-java-load-pic.png" alt="对象生命周期" /><br/>
说明：</p>

<blockquote><p>本文章所涉及的代码Gist地址:<a href="https://gist.github.com/zarue/0d5f83fa8458a9298b9d">点击查看</a><br/>
本文使用是Jdk6u-Hotspot</p></blockquote>

<!--more-->


<p>要想了解jvm底层的对象创建过程，还是要首先找到一个入口。new关键字无疑是最先想到的，但是看着这段代码“new Animal()” ,我还是找不到什么有用的信息，于是又想到了另一种方式。自定义classloader。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于自定义classloader 的文章，一搜一大堆，这里就不多说了。我自己定义了一个简单的Classloader。代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassLoaderTest</span> <span class="kd">extends</span> <span class="n">ClassLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">findClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">classBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
</span><span class='line'>          <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>          <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">256</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span><span class="o">((</span><span class="n">length</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))!=-</span><span class="mi">1</span><span class="o">){</span>
</span><span class='line'>              <span class="n">bos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">classBytes</span> <span class="o">=</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>          <span class="n">bos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">classBytes</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="s">&quot;class not found:&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">defineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">classBytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">classBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">ClassLoaderTest</span> <span class="n">clt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassLoaderTest</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Class</span> <span class="n">claszz</span> <span class="o">=</span> <span class="n">clt</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Animal&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="o">(</span><span class="n">Animal</span><span class="o">)</span><span class="n">claszz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>findClass（） 方法主要是加载class文件,然后调用defineClass（&hellip;）。<br/>
看一下defineClass(&hellip;)的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">defineClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span>
</span><span class='line'>                                         <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">ClassFormatError</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">protectionDomain</span> <span class="o">=</span> <span class="n">preDefineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">source</span> <span class="o">=</span> <span class="n">defineClassSourceLocation</span><span class="o">(</span><span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">defineClass1</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="n">source</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassFormatError</span> <span class="n">cfe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">defineTransformedClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="n">cfe</span><span class="o">,</span>
</span><span class='line'>                                       <span class="n">source</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">postDefineClass</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第5行：<code>preDefineClass(name, protectionDomain);</code>主要是进行一些预处理，比如检查名字是否合法，证书是否正确等等。有兴趣的自己看一下。<br/>
第11行：<code>defineClass1(...)</code>调用了native方法，这个方法位于：/share/native/java/lang/ClassLoader.c中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Java_java_lang_ClassLoader_defineClass1</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jstring</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jbyteArray</span> <span class="n">data</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jint</span> <span class="n">offset</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jint</span> <span class="n">length</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jstring</span> <span class="n">source</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">jbyte</span> <span class="o">*</span><span class="n">body</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">utfName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">utfSource</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">sourceBuf</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowNullPointerException</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowArrayIndexOutOfBoundsException</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="o">(</span><span class="n">jbyte</span> <span class="o">*)</span><span class="n">malloc</span><span class="o">(</span><span class="n">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">body</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">GetByteArrayRegion</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">body</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">((*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">ExceptionOccurred</span><span class="o">(</span><span class="n">env</span><span class="o">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">free_body</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfName</span> <span class="o">=</span> <span class="n">getUTF</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">buf</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">utfName</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">NULL</span><span class="o">);</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">free_body</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">VerifyFixClassname</span><span class="o">(</span><span class="n">utfName</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfName</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">source</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfSource</span> <span class="o">=</span> <span class="n">getUTF</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">sourceBuf</span><span class="o">,</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">sourceBuf</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">utfSource</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">NULL</span><span class="o">);</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">free_utfName</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfSource</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">JVM_DefineClassWithSource</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">utfName</span><span class="o">,</span> <span class="n">loader</span><span class="o">,</span> <span class="n">body</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">pd</span><span class="o">,</span> <span class="n">utfSource</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">utfSource</span> <span class="o">&amp;&amp;</span> <span class="n">utfSource</span> <span class="o">!=</span> <span class="n">sourceBuf</span><span class="o">)</span>
</span><span class='line'>        <span class="n">free</span><span class="o">(</span><span class="n">utfSource</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nl">free_utfName:</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">utfName</span> <span class="o">&amp;&amp;</span> <span class="n">utfName</span> <span class="o">!=</span> <span class="n">buf</span><span class="o">)</span>
</span><span class='line'>        <span class="n">free</span><span class="o">(</span><span class="n">utfName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nl">free_body:</span>
</span><span class='line'>    <span class="n">free</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第33行：<code>(*env)-&gt;GetByteArrayRegion(env, data, offset, length, body);</code>把传进来的clas对应的字节数组复制给body。<code>GetByteArrayRegion</code>此函数将Java传来的字节数组data，复制offset->length长度的数据给body。<br/>
第39行：把name转为UTF格式。<br/>
第58行：<code>JVM_DefineClassWithSource(env, utfName, loader, body, length, pd, utfSource);</code>该方法位于:<code>/share/vm/prims/jvm.cpp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jclass</span><span class="o">,</span> <span class="n">JVM_DefineClassWithSource</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span> <span class="kd">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">buf</span><span class="o">,</span>
</span><span class='line'> <span class="n">jsize</span> <span class="n">len</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">source</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper2</span><span class="o">(</span><span class="s">&quot;JVM_DefineClassWithSource %s&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nf">jvm_define_class_common</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">loader</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">pd</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>
调用了<code>jvm_define_class_common(...)</code>方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">jclass</span> <span class="nf">jvm_define_class_common</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span> <span class="kd">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">buf</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jsize</span> <span class="n">len</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">source</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jboolean</span> <span class="n">verify</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">source</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span>  <span class="n">source</span> <span class="o">=</span> <span class="s">&quot;__JVM_DefineClass__&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">THREAD</span><span class="o">-&gt;</span><span class="n">is_Java_thread</span><span class="o">(),</span> <span class="s">&quot;must be a JavaThread&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">JavaThread</span><span class="o">*</span> <span class="n">jt</span> <span class="o">=</span> <span class="o">(</span><span class="n">JavaThread</span><span class="o">*)</span> <span class="n">THREAD</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PerfClassTraceTime</span> <span class="nf">vmtimer</span><span class="o">(</span><span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclass_time</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclass_selftime</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclasses</span><span class="o">(),</span>
</span><span class='line'>                             <span class="n">jt</span><span class="o">-&gt;</span><span class="n">get_thread_stat</span><span class="o">()-&gt;</span><span class="n">perf_recursion_counts_addr</span><span class="o">(),</span>
</span><span class='line'>                             <span class="n">jt</span><span class="o">-&gt;</span><span class="n">get_thread_stat</span><span class="o">()-&gt;</span><span class="n">perf_timers_addr</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">PerfClassTraceTime:</span><span class="o">:</span><span class="n">DEFINE_CLASS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UsePerfData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_app_classfile_bytes_read</span><span class="o">()-&gt;</span><span class="n">inc</span><span class="o">(</span><span class="n">len</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Since exceptions can be thrown, class initialization can take place</span>
</span><span class='line'>  <span class="c1">// if name is NULL no check for class name in .class stream has to be made.</span>
</span><span class='line'>  <span class="n">symbolHandle</span> <span class="n">class_name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">const</span> <span class="kt">int</span> <span class="n">str_len</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">strlen</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">str_len</span> <span class="o">&gt;</span> <span class="nl">symbolOopDesc:</span><span class="o">:</span><span class="n">max_length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// It&#39;s impossible to create this class;  the name cannot fit</span>
</span><span class='line'>      <span class="c1">// into the constant pool.</span>
</span><span class='line'>      <span class="n">THROW_MSG_0</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_NoClassDefFoundError</span><span class="o">(),</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">class_name</span> <span class="o">=</span> <span class="nl">oopFactory:</span><span class="o">:</span><span class="n">new_symbol_handle</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">str_len</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassFileStream</span> <span class="nf">st</span><span class="o">((</span><span class="n">u1</span><span class="o">*)</span> <span class="n">buf</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span> <span class="o">*)</span><span class="n">source</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="nf">class_loader</span> <span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">loader</span><span class="o">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UsePerfData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">is_lock_held_by_thread</span><span class="o">(</span><span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                           <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">sync_JVMDefineClassLockFreeCounter</span><span class="o">(),</span>
</span><span class='line'>                           <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="nf">protection_domain</span> <span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">pd</span><span class="o">));</span>
</span><span class='line'>  <span class="n">klassOop</span> <span class="n">k</span> <span class="o">=</span> <span class="nl">SystemDictionary:</span><span class="o">:</span><span class="n">resolve_from_stream</span><span class="o">(</span><span class="n">class_name</span><span class="o">,</span> <span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">protection_domain</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">verify</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">TraceClassResolution</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">trace_class_resolution</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">jclass</span><span class="o">)</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="nl">Klass:</span><span class="o">:</span><span class="n">cast</span><span class="o">(</span><span class="n">k</span><span class="o">)-&gt;</span><span class="n">java_mirror</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第35行：把传入的字节数组转换为<code>ClassFileStream</code>对象，以后所有的class数据的提取，分析，验证，转换等都将依托于该对象，和之前的数组没有关系了。<br/>
第43行：调用<code>SystemDictionary::resolve_from_stream(...)</code>进行class对象的解析工作。该方法位于：<code>share/vm/classfile/systemDictionary.cpp</code><br/>
看一下这个方法里面的几行主要代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceKlassHandle</span> <span class="n">k</span> <span class="o">=</span> <span class="n">ClassFileParser</span><span class="o">(</span><span class="n">st</span><span class="o">).</span><span class="na">parseClassFile</span><span class="o">(</span><span class="n">class_name</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">protection_domain</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">parsed_name</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">verify</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">THREAD</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用了ClassFileParser的parseClassFile方法，这个方法里面完成Class对象的构建过程。代码位置:<code>src/share/vm/classfile/classFileParser.cpp</code><br/>
说道这里就要了解一下Class文件的格式了，<a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">Java语言规范</a>中是这么规定的,其实单讲这个格式也够写一篇文章的，这里不深入，有兴趣的自己网上搜吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassFile</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u4</span>             <span class="n">magic</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">minor_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">major_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">constant_pool_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">cp_info</span>        <span class="n">constant_pool</span><span class="o">[</span><span class="n">constant_pool_count</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">this_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">super_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces</span><span class="o">[</span><span class="n">interfaces_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">fields_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">field_info</span>     <span class="n">fields</span><span class="o">[</span><span class="n">fields_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">methods_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">method_info</span>    <span class="n">methods</span><span class="o">[</span><span class="n">methods_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再回到parseClassFile方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">u4</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u4_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="n">guarantee_property</span><span class="o">(</span><span class="n">magic</span> <span class="o">==</span> <span class="n">JAVA_CLASSFILE_MAGIC</span><span class="o">,</span>
</span><span class='line'>                     <span class="s">&quot;Incompatible magic value %u in class file %s&quot;</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">magic</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>对照上面的Class格式规范，首先获取magic标识(4字节)，然后判断它是不是等于CAFEBABE，如果不等于，则说明不是一个正确的Class文件格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Version numbers</span>
</span><span class='line'>  <span class="n">u2</span> <span class="n">minor_version</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="n">u2</span> <span class="n">major_version</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">is_supported_version</span><span class="o">(</span><span class="n">major_version</span><span class="o">,</span> <span class="n">minor_version</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">is_null</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">Exceptions:</span><span class="o">:</span><span class="n">fthrow</span><span class="o">(</span>
</span><span class='line'>        <span class="n">THREAD_AND_LOCATION</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">vmSymbolHandles:</span><span class="o">:</span><span class="n">java_lang_UnsupportedClassVersionError</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Unsupported major.minor version %u.%u&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">major_version</span><span class="o">,</span>
</span><span class='line'>        <span class="n">minor_version</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>      <span class="nl">Exceptions:</span><span class="o">:</span><span class="n">fthrow</span><span class="o">(</span>
</span><span class='line'>        <span class="n">THREAD_AND_LOCATION</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">vmSymbolHandles:</span><span class="o">:</span><span class="n">java_lang_UnsupportedClassVersionError</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;%s : Unsupported major.minor version %u.%u&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">name</span><span class="o">-&gt;</span><span class="n">as_C_string</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">major_version</span><span class="o">,</span>
</span><span class='line'>        <span class="n">minor_version</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nullHandle</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获得Class文件的版本号，分为主版本号和次版本号。然后判断当前的JVM版本支不支持此版本的Class文件的解析。<br/>
接下来就是常量池了，每一个Class对象里面都有一个对应的常量池(ConstantPoolOop)对象，用来存放Class中的常量。看一下<code>ClassFileParser::parse_constant_pool(.)</code>中的部分代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">parse_constant_pool_entries</span><span class="o">(</span><span class="n">cp</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>
调用parse_constant_pool_entries(&hellip;)对象来创建常量池项：<br/>
看一下<code>ClassFileParser::parse_constant_pool_entries(constantPoolHandle cp, int length, TRAPS)</code>中的部分代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">case</span> <span class="n">JVM_CONSTANT_Class</span> <span class="o">:</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// name_index, tag/access_flags</span>
</span><span class='line'>          <span class="n">u2</span> <span class="n">name_index</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>          <span class="n">cp</span><span class="o">-&gt;</span><span class="n">klass_index_at_put</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name_index</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量池对象constantPoolOop使用一个<code>typeArrayOop</code>来存储常量池项，回到上面的代码，首先判断剩余的字节数是否满足一个<code>JVM_CONSTANT_Class</code>要求的字节数(通过Class文件规范可知是3),然后是获得u2长度的字节数作为name的真实值在常量池中对应的index(Animal的常量池可以参考<a href="https://gist.github.com/zarue/0d5f83fa8458a9298b9d#file-3-animal-javap">Animal常量池</a>)。<br/>
再来看一个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">case</span> <span class="n">JVM_CONSTANT_Utf8</span> <span class="o">:</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// utf8_length</span>
</span><span class='line'>          <span class="n">u2</span>  <span class="n">utf8_length</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>          <span class="n">u1</span><span class="o">*</span> <span class="n">utf8_buffer</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u1_buffer</span><span class="o">();</span>
</span><span class='line'>          <span class="k">assert</span><span class="o">(</span><span class="n">utf8_buffer</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">,</span> <span class="s">&quot;null utf8 buffer&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// Got utf8 string, guarantee utf8_length+1 bytes, set stream position forward.</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="n">utf8_length</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// utf8 string, tag/access_flags</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">skip_u1_fast</span><span class="o">(</span><span class="n">utf8_length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Before storing the symbol, make sure it&#39;s legal</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">_need_verify</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">verify_legal_utf8</span><span class="o">((</span><span class="n">unsigned</span> <span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">,</span> <span class="n">utf8_length</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">AnonymousClasses</span> <span class="o">&amp;&amp;</span> <span class="n">has_cp_patch_at</span><span class="o">(</span><span class="n">index</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Handle</span> <span class="n">patch</span> <span class="o">=</span> <span class="n">clear_cp_patch_at</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">guarantee_property</span><span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">is_instance</span><span class="o">(</span><span class="n">patch</span><span class="o">()),</span>
</span><span class='line'>                               <span class="s">&quot;Illegal utf8 patch at %d in class file %s&quot;</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">index</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">as_utf8_string</span><span class="o">(</span><span class="n">patch</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">// (could use java_lang_String::as_symbol instead, but might as well batch them)</span>
</span><span class='line'>            <span class="n">utf8_buffer</span> <span class="o">=</span> <span class="o">(</span><span class="n">u1</span><span class="o">*)</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>            <span class="n">utf8_length</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">strlen</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>          <span class="n">symbolOop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">SymbolTable:</span><span class="o">:</span><span class="n">lookup_only</span><span class="o">((</span><span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">,</span> <span class="n">utf8_length</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">names</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">;</span>
</span><span class='line'>            <span class="n">lengths</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">utf8_length</span><span class="o">;</span>
</span><span class='line'>            <span class="n">indices</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hashValues</span><span class="o">[</span><span class="n">names_count</span><span class="o">++]</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">names_count</span> <span class="o">==</span> <span class="nl">SymbolTable:</span><span class="o">:</span><span class="n">symbol_alloc_batch_size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="nl">oopFactory:</span><span class="o">:</span><span class="n">new_symbols</span><span class="o">(</span><span class="n">cp</span><span class="o">,</span> <span class="n">names_count</span><span class="o">,</span> <span class="n">names</span><span class="o">,</span> <span class="n">lengths</span><span class="o">,</span> <span class="n">indices</span><span class="o">,</span> <span class="n">hashValues</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>              <span class="n">names_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cp</span><span class="o">-&gt;</span><span class="n">symbol_at_put</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是Utf-8类型常量的处理方式，首先检查<code>SymbolTable</code>中是否存在该字符串，如果存在就返回已经存在的字符串对象。如果不存在，首先调用<code>oopFactory::new_symbols(...)</code>创建一个symbol对象，然后将它加入到SymbolTable中。这样就保证了同样的符号在jvm中仅仅会存在一个对象，可以大大节省存储空间。这里和之前讲的字符串池是一样的处理方式。 <br/>
常量池项解析完成之后，我们回到<code>ClassFileParser::parse_constant_pool(.)</code>方法，接下来是对转换完成的常量池项进行检查，如果全部检查通过，则返回该常量池对象。<br/>
然后再回到<code>ClassFileParser::parseClassFile(...)</code>方法。<br/>
接下来会接着解析<code>access_flag</code>,<code>this_class</code>,<code>super_class</code>等项,具体看源代码即可。
全都解析，验证完了之后，会创建一个描述这个类的对象即:instanceKlass来存储上面解析出来的各个项。instanceKlass的结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceKlass</span> <span class="nl">layout:</span>
</span><span class='line'><span class="o">[</span><span class="n">header</span>                     <span class="o">]</span> <span class="n">klassOop</span>
</span><span class='line'><span class="o">[</span><span class="n">klass</span> <span class="n">pointer</span>              <span class="o">]</span> <span class="n">klassOop</span>
</span><span class='line'><span class="o">[</span><span class="n">C</span><span class="o">++</span> <span class="n">vtbl</span> <span class="n">pointer</span>           <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">subtype</span> <span class="n">cache</span>              <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">instance</span> <span class="n">size</span>              <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">java</span> <span class="n">mirror</span>                <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="kd">super</span>                      <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">access_flags</span>               <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">name</span>                       <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">first</span> <span class="n">subklass</span>             <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">next</span> <span class="n">sibling</span>               <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">array</span> <span class="n">klasses</span>              <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">methods</span>                    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">local</span> <span class="n">interfaces</span>           <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">transitive</span> <span class="n">interfaces</span>      <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">number</span> <span class="n">of</span> <span class="n">implementors</span>     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">implementors</span>               <span class="o">]</span> <span class="n">klassOop</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">fields</span>                     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">constants</span>                  <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">class</span> <span class="nc">loader</span>               <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">protection</span> <span class="n">domain</span>          <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">signers</span>                    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">source</span> <span class="n">file</span> <span class="n">name</span>           <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">inner</span> <span class="n">classes</span>              <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">static</span> <span class="n">field</span> <span class="n">size</span>          <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">nonstatic</span> <span class="n">field</span> <span class="n">size</span>       <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">static</span> <span class="n">oop</span> <span class="n">fields</span> <span class="n">size</span>     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">nonstatic</span> <span class="n">oop</span> <span class="n">maps</span> <span class="n">size</span>    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">has</span> <span class="n">finalize</span> <span class="n">method</span>        <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">deoptimization</span> <span class="n">mark</span> <span class="n">bit</span>    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">initialization</span> <span class="n">state</span>       <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">initializing</span> <span class="n">thread</span>        <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">Java</span> <span class="n">vtable</span> <span class="n">length</span>         <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">oop</span> <span class="n">map</span> <span class="n">cache</span> <span class="o">(</span><span class="n">stack</span> <span class="n">maps</span><span class="o">)</span> <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="n">Java</span> <span class="n">vtable</span>             <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">vtable_len</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="kd">static</span> <span class="n">oop</span> <span class="n">fields</span>       <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">static_oop_fields_size</span>
</span><span class='line'><span class="o">[</span>         <span class="kd">static</span> <span class="n">non</span><span class="o">-</span><span class="n">oop</span> <span class="n">fields</span>   <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">static_field_size</span> <span class="o">-</span> <span class="n">static_oop_fields_size</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="n">nonstatic</span> <span class="n">oop</span><span class="o">-</span><span class="n">map</span> <span class="n">blocks</span><span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">nonstatic_oop_map_size</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是初始化静态变量(准备阶段):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Initialize static fields</span>
</span><span class='line'>    <span class="n">this_klass</span><span class="o">-&gt;</span><span class="n">do_local_static_fields</span><span class="o">(&amp;</span><span class="n">initialize_static_field</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后是一系验证，验证通过之后返回该对象。<br/>
最后再回到<code>jvm_define_class_common(..)</code>方法，看如下代码:<br/>
<code>(jclass) JNIHandles::make_local(env, Klass::cast(k)-&gt;java_mirror());</code><br/>
首先是把klassOop 转为Klass 对象，然后加入到当前线程中，然后转换为class对象返回。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 String 常量池 二]]></title>
    <link href="http://blog.zarue.com//blog/2014/05/29/runtime-string-pool-2/"/>
    <updated>2014-05-29T20:58:21+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/05/29/runtime-string-pool-2</id>
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://blog.zarue.com//blog/2014/05/27/runtime-string-pool-1">JVM 之 String 常量池 一</a>中我们了解到JVM中有一个叫String常量池的东西，String常量池到底是什么样？，又是怎样工作的呢？今天就来看一下。<br/>
做任何事情都要首先找一个入口。我们怎么才能找到常量池的入口呢？<br/>
我们首先想到String里面有个intern方法，可以在运行时向常量池中动态添加字符串。我们就从这个方法入手。<br/>
先看String 的intern的源代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">intern</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个native 方法，也就是这个方法不是用java实现的，要找到这个native 方法就要去<a href="http://openjdk.java.net/">JDK的源代码</a>中查找，它位于<code>openjdk/jdk/src/share/native/java/lang</code>目录中的<code>String.c</code>中。这个目录下还有许多其他java类中对应的native方法的实现，例如object类中的<code>hashCode</code>,<code>getClass</code>,<code>clone</code>等方法都在<code>Object.c</code>里面。 <br/>
String.c 中只有一个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="n">include</span> <span class="s">&quot;jvm.h&quot;</span>
</span><span class='line'><span class="err">#</span><span class="n">include</span> <span class="s">&quot;java_lang_String.h&quot;</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">Java_java_lang_String_intern</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="nf">JVM_InternString</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><code>Java_java_lang_String_intern</code> 就是String类intern 对应的native方法,然而<code>Java_java_lang_String_intern</code> 只是调用了<code>JVM_InternString</code>这个方法。<br/>
那么这个方法又在哪呢？<br/>
根据经验我们发现<code>String.c</code> 引入了<code>jvm.h</code>，去<code>jvm.h</code>中去看一下。<code>jvm.h</code> 位于<code>openjdk/jdk/src/share/javavm/export</code> 下面，<code>jvm.h</code>中正好定义了我们要找的<code>JVM_InternString</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* java.lang.String</span>
</span><span class='line'><span class="cm">* */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">JVM_InternString</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jstring</span> <span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里只是定义,我们继续找这个定义对应的实现方法。相关实现在<code>jvm.cpp</code>中,<code>jvm.cpp</code> 位于：<code>openjdk/hotspot/src/share/vm/prims</code> 目录中。<code>jvm.cpp</code> 中<code>JVM_InternString</code>的具体实现如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jstring</span><span class="o">,</span> <span class="n">JVM_InternString</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jstring</span> <span class="n">str</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper</span><span class="o">(</span><span class="s">&quot;JVM_InternString&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">JvmtiVMObjectAllocEventCollector</span> <span class="n">oam</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">str</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="n">oop</span> <span class="n">string</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve_non_null</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">oop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">intern</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="o">(</span><span class="n">jstring</span><span class="o">)</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码我们可以看出，实际上<code>JVM_InternString</code> 又调用了<code>StringTable</code> 的 <code>intern</code> 方法。<code>StringTable</code> 是在<code>symbolTable.hpp</code>  中被声明的，代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">StringTable</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Hashtable</span><span class="o">&lt;</span><span class="n">oop</span><span class="o">,</span> <span class="n">mtSymbol</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">friend</span> <span class="kd">class</span> <span class="nc">VMStructs</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">// The string table</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">StringTable</span><span class="o">*</span> <span class="n">_the_table</span><span class="o">;</span>
</span><span class='line'><span class="o">.......</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先简单看一下<code>StringTable</code>这个类： <br/>
1.  继承了Hashtable&lt;oop, mtSymbol>，在Hashtable中，字符串被包装成HashtableEntry对象存储，同时为了解决hash碰撞的问题，HashtableEntry对象被设计为链表结构。最后HashTable使用数组_buckets来存储这些HashtableEntry。 <br/>
2. <code>static StringTable* _the_table</code> : StringTable的实例变量,在<code>create_table()</code> 中被实例化。<br/>
3. <code>lookup(...)</code>: 用来查找常量池中是否包含某个实例。<br/>
4. <code>basic_add(...)</code>: 往常量池中添加新实例。<br/>
5. <code>intern(...)</code>: 判断常量池中是否有某个实例，有则返回该实例，没有则调用<code>basic_add</code> 添加。</p>

<p>看一下intern方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">intern</span><span class="o">(</span><span class="n">Handle</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                        <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hashValue</span> <span class="o">=</span> <span class="n">hash_string</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">the_table</span><span class="o">()-&gt;</span><span class="n">hash_to_index</span><span class="o">(</span><span class="n">hashValue</span><span class="o">);</span>
</span><span class='line'>  <span class="n">oop</span> <span class="n">string</span> <span class="o">=</span> <span class="n">the_table</span><span class="o">()-&gt;</span><span class="n">lookup</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">hashValue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Found</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="k">return</span> <span class="n">string</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Otherwise, add to symbol to table</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">the_table</span><span class="o">()-&gt;</span><span class="n">basic_add</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">hashValue</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第3行:首先调用hash_string()计算字符串的hash值。hash值计算规则:<code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code> 例如：<code>“a”.hashCode() = 97</code>。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">hash_string</span><span class="o">(</span><span class="n">jchar</span><span class="o">*</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">unsigned</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">len</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span><span class="o">*</span><span class="n">h</span> <span class="o">+</span> <span class="o">(</span><span class="n">unsigned</span><span class="o">)</span> <span class="o">*</span><span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第4行:把hash值转换为数组的下标。转换规则：<code>hash % table_size</code>。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">hash_to_index</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">full_hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">full_hash</span> <span class="o">%</span> <span class="n">_table_size</span><span class="o">;</span>
</span><span class='line'>    <span class="k">assert</span><span class="o">(</span><span class="n">h</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">_table_size</span><span class="o">,</span> <span class="s">&quot;Illegal hash value&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第5行:检查该字符串是否存在，如果存在，就返回。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">lookup</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                        <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">HashtableEntry</span><span class="o">*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">(</span><span class="n">index</span><span class="o">);</span> <span class="n">l</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">;</span> <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">hash</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">equals</span><span class="o">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">literal</span><span class="o">(),</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">literal</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明:<br/>
1.首先从数组_buckets获得当前下标对应的HashtableEntry。 <br/>
2.判断该entry的hash值和字符串值是否都相等(是不是很眼熟)，如果都相等则返回该entry中存储的字符串对象。<br/>
3.如果(2)条件不成立则继续循环next entry。</p>

<p>第11行:调用StringTable的<code>basic_add(...)</code>方法将字符串添加到常量池。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">basic_add</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">Handle</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                           <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hashValue</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">debug_only</span><span class="o">(</span><span class="n">StableMemoryChecker</span> <span class="n">smc</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span> <span class="o">*</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">name</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_in_reserved</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">||</span> <span class="nl">GC_locker:</span><span class="o">:</span><span class="n">is_active</span><span class="o">(),</span>
</span><span class='line'>         <span class="s">&quot;proposed name of symbol must be stable&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">string</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// try to reuse the string if possible</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">string_or_null</span><span class="o">.</span><span class="na">is_null</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">string_or_null</span><span class="o">()-&gt;</span><span class="n">is_perm</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">string_or_null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">create_tenured_from_unicode</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Allocation must be done before grapping the SymbolTable_lock lock</span>
</span><span class='line'>  <span class="n">MutexLocker</span> <span class="nf">ml</span><span class="o">(</span><span class="n">StringTable_lock</span><span class="o">,</span> <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">equals</span><span class="o">(</span><span class="n">string</span><span class="o">(),</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">),</span>
</span><span class='line'>         <span class="s">&quot;string must be properly initialized&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Since look-up was done lock-free, we need to check if another</span>
</span><span class='line'>  <span class="c1">// thread beat us in the race to insert the symbol.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">oop</span> <span class="n">test</span> <span class="o">=</span> <span class="n">lookup</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">hashValue</span><span class="o">);</span> <span class="c1">// calls lookup(u1*, int)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">test</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Entry already added</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HashtableEntry</span><span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">new_entry</span><span class="o">(</span><span class="n">hashValue</span><span class="o">,</span> <span class="n">string</span><span class="o">());</span>
</span><span class='line'>  <span class="n">add_entry</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">entry</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">string</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第12行:创建一个String对象,创建过程可以参考<code>openjdk/hotspot/src/share/vm/classfile/javaClasses.cpp</code>中<code>java_lang_String</code>类的<code>create_tenured_from_unicode</code>方法。后面要单独讲对象的创建过程，这里就不展开了，后面文章写完了，会把链接贴过来。<br/>
第30行:创建一个HashtableEntry对象。<br/>
第31行: 将新创建的Sting对象添加到常量池<code>_buckets</code>中。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="kt">void</span> <span class="nl">BasicHashtable:</span><span class="o">:</span><span class="n">add_entry</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">BasicHashtableEntry</span><span class="o">*</span> <span class="n">entry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">entry</span><span class="o">-&gt;</span><span class="n">set_next</span><span class="o">(</span><span class="n">bucket</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>  <span class="n">_buckets</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">set_entry</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>  <span class="o">++</span><span class="n">_number_of_entries</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明:<br/>
1.首先从<code>_buckets</code>数组获得index位置的HashtableEntry 记为oldEntry。 <br/>
2.将oldEntry设置为entry的<code>_next</code>(HashtableEntry设计为链表结构,就是用在这里)<br/>
3.将entry设置到_buckets的index位置</p>

<h3>总结:</h3>

<p>String常量池对应的数据结构就是StringTable对象,也就是一个Hashtable结构。hashtable的结构是数组+链表。hashtable一直持有字符串的引用，因此字符串池中的对象不会被垃圾收集器回收掉。<br/>
Hashtable 的结构看起来应该是这样的：<br/>
<img src="http://blog.zarue.com//images/blog/2014-06/20140602-hashtable.png" alt="Hasttable" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 String 常量池 一]]></title>
    <link href="http://blog.zarue.com//blog/2014/05/27/runtime-string-pool-1/"/>
    <updated>2014-05-27T20:30:20+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/05/27/runtime-string-pool-1</id>
    <content type="html"><![CDATA[<h4>1.Sting对象创建方式</h4>

<p>JAVA里面创建字符串有两种方式：<br/>
1. 通过字符串常量方式:String a = &ldquo;a&rdquo;;<br/>
2. 通过new 关键字创建:new String(&ldquo;a&rdquo;);</p>

<p>但是这两种创建字符串的方式有很大的不同。<br/>
1. 使用第一种方式，jvm首先会检查字符串常量池中是否存在了这个常量，如果存在，就返回池中的实例引用。如果不存在，就会实例化一个字符串并放到池中,然后返回引用。<br/>
2. 使用第二种方式，则直接分配到heap中，不指向字符串常量池中的任何对象，和字符串常量池没有关系。</p>

<h4>2.下面来看一个例子: <a href="https://gist.github.com/zarue/25e0afedb33de86da650">本例子Gist地址</a></h4>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringConstantTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">str_0_static</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">str_0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">StringConstantTest</span> <span class="n">sct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//同package对象</span>
</span><span class='line'>      <span class="n">StringConstantTest1</span> <span class="n">sct1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest1</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//不同package对象</span>
</span><span class='line'>      <span class="n">StringConstantTest2</span> <span class="n">sct2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest2</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">str0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;ab&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">+</span><span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str4</span> <span class="o">=</span> <span class="n">str0</span> <span class="o">+</span> <span class="n">str1</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str5</span> <span class="o">=</span> <span class="n">str0</span> <span class="o">+</span> <span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str6</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str7</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str4</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和成员变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct1.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct1</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct2.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct2</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和静态变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==str_0_static： &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">str_0_static</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==StringConstantTest1.str_0_static: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">StringConstantTest1</span><span class="o">.</span><span class="na">str_0_static</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==StringConstantTest2.str_0_static: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">StringConstantTest2</span><span class="o">.</span><span class="na">str_0_static</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str3: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str3</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str4: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str4</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str5: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str5</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和对象</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str6: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str6</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str7: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str7</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str8: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str8</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//对象和对象 intern</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str7.intern()==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str7</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str8.intern()==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str8</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//对象和对象equals</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str6.equals(str7): &quot;</span><span class="o">+</span><span class="n">str6</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">str7</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2.equals(str6): &quot;</span><span class="o">+</span><span class="n">str2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">str6</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">StringConstantTest1</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">str_0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">str_0_static</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://blog.zarue.com//images/blog/2014-05/20140528-string-pool-1.png" alt="结果" /></p>

<h4>分析(下面所指行号均为源代码行号):</h4>

<ol>
<li><p><strong>24-31</strong>行的结果说明:<br/>
只要是字符串常量方式创建的对象，无论是类变量，实例变量，还是局部变量，无论是不是位于同一个包中。都是共享字符串常量池中的同一个实例。</p></li>
<li><p><strong>34</strong>行为true, 是因为:<br/>
String str3 = &ldquo;a&rdquo;+&ldquo;b&rdquo;; 是因为“a” 和 “b” 都是常量，编译器在编译阶段会直接优化为String str3 = &ldquo;ab&#8221;。<br/>
可以通过javap 反编译class字节码来看一下:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">30</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">32</span><span class="o">:</span> <span class="n">ldc</span> <span class="err">#</span><span class="mi">35</span> <span class="c1">// String ab</span>
</span><span class='line'><span class="mi">34</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">36</span><span class="o">:</span> <span class="n">ldc</span> <span class="err">#</span><span class="mi">35</span> <span class="c1">// String ab </span>
</span></code></pre></td></tr></table></div></figure>


<p>上面第36行就是<code>String str3 = "a"+"b";</code>对应的字节码。这里可以看出&#8221;a&#8221;+&ldquo;b&#8221;已经被优化为&#8221;ab&#8221;了。</p>

<ol>
<li><strong>35</strong>行为false, 是因为:<br/>
String str4 = str0 + str1; 是因为str0 和 str1 都是变量，需要运行期才能转换为对应的值，而且String 会把变量的+操作，转换成StringBuilder的append操作,然后返回一个新的String对象。<br/>
再看一下字节码文件:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">40</span><span class="o">:</span> <span class="k">new</span> <span class="err">#</span><span class="mi">37</span> <span class="c1">// class java/lang/StringBuilder</span>
</span><span class='line'><span class="mi">43</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'><span class="mi">44</span><span class="o">:</span> <span class="n">aload</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">46</span><span class="o">:</span> <span class="n">invokestatic</span> <span class="err">#</span><span class="mi">39</span> <span class="c1">// Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;</span>
</span><span class='line'><span class="mi">49</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">45</span> <span class="c1">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
</span><span class='line'><span class="mi">52</span><span class="o">:</span> <span class="n">aload</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">54</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">48</span> <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'><span class="mi">57</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">52</span> <span class="c1">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'><span class="mi">60</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上面的字节码可以看出<code>String str4 = str0 + str1;</code>  相当于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stringbuilder</span><span class="o">(</span><span class="n">str0</span><span class="o">);</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>再看一下StringBuilder的toString()方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// Create a copy, don&#39;t share the array</span>
</span><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由以上代码可已看出，toString()是new了一个String对象返回，所以是直接分配在heap上。因此结果为false。</p>

<ol>
<li><strong>39-41</strong>行为false: 是因为:<br/>
str6,str7,str8 都是通过new 创建，数据分配到heap上面，不指向字符串常量池中的任何对象，所以三个对象均不同，引用自然不同，因此比较结果均为false。</li>
<li><p><strong>44-46</strong>行为true: 是因为:<br/>
当一个String实例str调用intern()方法时，Java查找字符串常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用。所以上面均为true。</p></li>
<li><p><strong>49-50</strong>行为true: 是因为:<br/>
String的值是用char数组保存的，equals 是比较的两个String对象中的char数组值是否一致，所以两个结果为true。<br/>
看一下String的equals方法:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">anObject</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">anotherString</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">anObject</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">anotherString</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">v1</span><span class="o">[]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">v2</span><span class="o">[]</span> <span class="o">=</span> <span class="n">anotherString</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">n</span><span class="o">--</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">v1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">v2</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>                            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>下一节<a href="http://blog.zarue.com//blog/2014/05/29/runtime-string-pool-2/">JVM 之 String常量池二</a>将会详细讲一下字符串池的结构以及原理</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 Java 对象结构]]></title>
    <link href="http://blog.zarue.com//blog/2014/05/22/jvm-object-structure/"/>
    <updated>2014-05-22T14:09:15+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/05/22/jvm-object-structure</id>
    <content type="html"><![CDATA[<h2>1. Java对象在内存中到底是什么样?</h2>

<p>JAVA对象在内存中的表现形式就是一系列按照<em>某种规范</em>排列的字节(如果不清楚物理内存j的实现方式，请参考：<a href="http://blog.zarue.com/blog/2014/05/21/cpu-and-memory/">关于CPU寻址和物理内存结构</a> )。
那在JVM中这个规范是怎么定义的呢？
Hotspot虚拟机中，对象分为两大类：普通对象和数组对象，两类对象在内存中的布局可以分为三部分:<code>对象头，对象实例数据， 对齐填充</code> 。不同的是普通对象的对象头是由<code>MARK WORD，CLASS对象指针</code>两部分组成，而数组对象头是由<code>MARK WORD，CLASS对象指针，数组长度</code>三部分组成，如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-object-arrayObject-structure.png" alt="对象结构" /></p>

<!--more-->


<h4>1.首先看一下对象头的具体结构(表格中的“长度“同时标明了32位和64位虚拟机):</h4>

<table>
<thead>
<tr>
<th align="center">内容</th>
<th align="center">长度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">  Mark Word  </td>
<td align="center">  32/64bit  </td>
<td align="left">  存储对象的hashCode或锁信息等。</td>
</tr>
<tr>
<td align="center">  Class对象指针  </td>
<td align="center">  32/64bit  </td>
<td align="left">  存储到对象类型数据的指针</td>
</tr>
<tr>
<td align="center">  数组长度  </td>
<td align="center">  32/64bit  </td>
<td align="left">  数组的长度（如果当前对象是数组）</td>
</tr>
</tbody>
</table>


<p>Java对象头里的Mark Word里默认存储对象的HashCode，分代年龄和锁标记位。32位JVM的Mark Word的默认存储结构(无锁状态)如下：</p>

<table>
<thead>
<tr>
<th align="center">锁状态</th>
<th align="center">25 bit</th>
<th align="left"> 4 bit</th>
<th align="left">1 bit是否是偏向锁</th>
<th align="left">2 bit锁标志位</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> 无锁状态</td>
<td align="center">对象的hashCode</td>
<td align="left">对象分代年龄</td>
<td align="left">0</td>
<td align="left">01</td>
</tr>
</tbody>
</table>


<p>在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。Mark Word可能变化为存储以下4种数据：<code>轻量级锁</code>，<code>重量级锁</code>，<code>GC标记</code> ，<code>偏向锁</code>。本文只讨论对象结构，如果想详细了解对象锁，可以参考:<a href="http://ifeve.com/java-synchronized/">Java SE1.6中的Synchronized</a></p>

<h4>2.对象实例数据：</h4>

<p>实例数据包括自身的实例变量和从父类继承的实例变量，这些变量的排序顺序受虚拟机分配策略参数（FieldsAllocationStyle）和字段在源代码中定义的顺序影响。HotSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers）。从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。如果CompactFields参数值为true（默认为true），那子类之中较窄的变量也可能会插入到父类变量的空隙之中。</p>

<h4>3.对齐填充数据：</h4>

<p>对齐填充数据不是必须的，它仅仅起着占位的作用。HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。对象头部分正好似8字节的倍数（1倍或者2倍），因此当对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>

<h2>2. 现在我们就通过实例来看一下JVM中的对象结构是不是和上面所述一样呢?</h2>

<p>说明:下面的实验我们将用到Hotspot提供的虚拟机调试工具ServiceAbility Agent。如果不太熟悉该工具可以参考:<a href="http://rednaxelafx.iteye.com/blog/1847971">借HSDB来探索HotSpot VM的运行时数据</a><br/>
环境:Ubuntu 14.04 32bit</p>

<h4>1.先看一段简单代码：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Long</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>main方法里面包含3个对象：<code>Integer</code>,<code>Long</code>,<code>Boolean</code> ，我们现在通过SA依次来看一下每一个对象的结构和大小：<br/>
1.运行上面的程序，在<code>System.out.println("")</code>这行打个断点是虚拟机进程暂停<br/>
2.使用JPS查看虚拟机进程PID:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-objectsize-jps.png" alt="jps截图" /><br/>
3.启动SA(HSDB)<br/>
<code>sudo java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.HSDB</code><br/>
4.attach 上面的PID 3813,连上之后我们进入内存查看界面，如图:</p>

<p><img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory.png" alt="内存查看" /></p>

<p>红色方框中的内容就是main方法中我们new的三个对象，通过右边的注释我们也可以看出来。<br/>
三个对象在内存中的地址分别是：</p>

<blockquote><p>Integer i &nbsp;&nbsp;&nbsp; 0xa0159410<br/>
Long l  &nbsp;&nbsp;&nbsp; 0xa0159520<br/>
Boolean b &nbsp;&nbsp;&nbsp;0xa0159650</p></blockquote>

<p>首先我们先看Integer i 对象,选择SA中的菜单:<code>Tool--&gt;Inspect</code>子菜单,在address中输入<code>0xa0159410</code>可以得到这个对象，如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-integer.png" alt="Integer对象内存结构" /></p>

<p>按照刚才得方法，接下来我们看一下Long l 对象，如图：<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-long.png" alt="Long对象内存结构" /></p>

<p>再看一下Boolean b 对象,如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-boolean.png" alt="Boolean对象内存结构" /></p>

<p>小结:因为对象实例数据只包括实例变量和从父类继承得实例变量，通过查看Integer,Long,Boolean 的源代码可知，这几个类只有value 一个实例变量，所以除了<em>mark(MARK_WORD),</em>metadata._klass(class对象指针)，我们只能看到一个value变量。</p>

<h4>2.现在我们看一个复杂点的:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">age</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Long</span> <span class="n">height</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Boolean</span> <span class="n">sex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
我们看一下Animal的对象结构,如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-animal.png" alt="Animal对象内存结构" /></p>

<p>由图可以看出，三个实例变量都在对象Animal里面了。</p>

<h4>3.我们再看一个继承的:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tiger</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Double</span> <span class="n">weight</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tiger</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用HSDB查看结果，如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-tiger.png" alt="Tiger对象内存结构" /></p>

<p>由图可见，从父类继承的变量也是存在子类里面的。</p>

<h4>4.最后看一个数组的:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tiger</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Double</span> <span class="n">wight</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">childs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tiger</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用HSDB查看,结果如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-array.png" alt="数组对象内存结构" /></p>

<p>不幸的事情出现了，为什么这个数组对象没有显示length变量呢？难道我们之前说的数组对象的结构式错的？<br/>
用inspect 查看一下这个对象的size:<br/>
<code>inspect 0xa01ba470</code> 结果如图所示：<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140524-hsdb-memory-array-size.png" alt="数组对象size" /></p>

<p>我们来算一下:<br/>
1. 如果这个对象没有length变量，那么大小应该是：size=4+4=8.<br/>
2. 如果这个对象有length，那么大小应该是：size=4+4+4+4(补全)=16,和刚才截图中的一样。所以这个length肯定是有的，至于为什么没显示出来，我觉得有可能是这个SA插件得bug。</p>

<p>总结：通过SA我们可以查看JVM内部的实时数据，这对我们学习JVM是一个很有利的工具，了解对象的结构是万里长征迈出的第一步。<br/>
参考文章:<br/>
<a href="http://rednaxelafx.iteye.com/blog/1847971">http://rednaxelafx.iteye.com/blog/1847971</a><br/>
<a href="http://ifeve.com/java-synchronized/">http://ifeve.com/java-synchronized/</a><br/>
<a href="http://icyfenix.iteye.com/blog/1145044">http://icyfenix.iteye.com/blog/1145044</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于CPU寻址和物理内存结构]]></title>
    <link href="http://blog.zarue.com//blog/2014/05/21/cpu-and-memory/"/>
    <updated>2014-05-21T20:35:18+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/05/21/cpu-and-memory</id>
    <content type="html"><![CDATA[<h2>本文讨论的都是概念模型，实际实现方式肯定会有不同</h2>

<h3>1. 关于CPU的几个概念</h3>

<ol>
<li>数据总线：数据总线是CPU和其它组件（比如：内存）之间进行数据交互的通道。</li>
<li>数据总线宽度：是指CPU中寄存器的位数，即CPU位数，我们常说的32位，64位就是指的这个参数。CPU的位数和CPU的寻址能力没有关系。我们之前经常听到32位的CPU最大寻址能力是2<sup>32</sup> 因此它最大可识别的内存是4G，64位CPU可以识别4G以上内存，其实这是不正确的，因为CPU的寻址能力和CPU的位数没有关系。</li>
<li>地址总线：CPU是通过地址总线来进行内存寻址。</li>
<li>地址总线宽度：地址总线宽度决定了CPU的寻址范围，如果地址总线是32位，那么该CPU的寻址范围就是0-2<sup>32</sup>-1（0x00000000-0xFFFFFFFF），也就是4G个存储单元，如果存储单元是按字节编址，那么CPU可以寻址的最大内存量就是4G(byte)，这时候即使有再大的内存也不会被识别。</li>
<li>控制总线：主要是将CPU的控制指令传送到其它组件</li>
</ol>


<p>关于总线更详细的文章网上有很多，例如：</p>

<ul>
<li><a href="http://share.onlinesjtu.com/mod/tab/view.php?id=253">总线的内部结构</a></li>
<li><a href="http://my.oschina.net/u/158589/blog/70813">CPU位数，寻址能力，指令集，寄存器位数，操作系统位数</a></li>
</ul>


<!--more-->


<h3>2. 关于内存的几个概念</h3>

<ol>
<li>存储元：是存储器的最小存储单位，它可以存放一个二进制代码。</li>
<li>存储单元：若干个存储元构成一个存储单元，每个存储单元可以存放一个字节（按字节编址），或者存放一个字（按字编址）,当然理论上也存在按bit编址的可能，当然用的非常少。一个字是几个字节呢？这个看计算机的具体实现。</li>
<li>存储单元地址：每个存储单元的编号，一般用一个十六进制数来表示。CPU就是根据这个地址访问存储单元中的数据。</li>
<li>存储器：若干个存储单元构成一个存储器。</li>
</ol>


<p>关于内存更详细的文章网上也有很多，例如：</p>

<ul>
<li><a href="http://www.baike.com/wiki/%E5%AD%98%E5%82%A8%E5%99%A8">互动百科-存储器</a></li>
</ul>


<p>总结：了解一下CPU和内存的底层结构，再去学习底层程序实现的时候就不会感到那么迷茫了（一个数据到底在内存中是怎么存的呢？）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX vim 输入中文乱码问题]]></title>
    <link href="http://blog.zarue.com//blog/2014/05/18/vim-chinese-error/"/>
    <updated>2014-05-18T22:05:24+08:00</updated>
    <id>http://blog.zarue.com//blog/2014/05/18/vim-chinese-error</id>
    <content type="html"><![CDATA[<h3>出现问题的环境:</h3>

<ol>
<li>OSX 10.9.2 英文</li>
<li>VIM 7.3</li>
</ol>


<h3>问题描述:</h3>

<ol>
<li>可以正常显示文件中得中文字符</li>
<li>输入中文字符会出现乱码</li>
<li>通过在.vimrc中设置编码格式无效</li>
</ol>


<h3>解决方案:</h3>

<p>找到 <code>Terminal--&gt;Preferences--&gt;Settings--&gt;Advanced--&gt;Escape non-ASCII input with Control-V</code> 取消该选项即可。</p>

<!--more-->


<p>如果你尝试了设置各种编码格式都无法解决乱码问题的话，可以尝试一下该方法<br/>
如图:<br/>
<img src="http://blog.zarue.com//images/blog/2014-05/20140519-1-vim.png" alt="示例" /></p>
]]></content>
  </entry>
  
</feed>
