<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: System | zarue]]></title>
  <link href="http://zarue.github.io//blog/categories/system/atom.xml" rel="self"/>
  <link href="http://zarue.github.io//"/>
  <updated>2014-06-01T15:15:17+08:00</updated>
  <id>http://zarue.github.io//</id>
  <author>
    <name><![CDATA[YungHua.Ma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于CPU寻址和物理内存结构]]></title>
    <link href="http://zarue.github.io//blog/2014/05/21/cpu-and-memory/"/>
    <updated>2014-05-21T20:35:18+08:00</updated>
    <id>http://zarue.github.io//blog/2014/05/21/cpu-and-memory</id>
    <content type="html"><![CDATA[<h2>本文讨论的都是概念模型，实际实现方式肯定会有不同</h2>

<h3>1. 关于CPU的几个概念</h3>

<ol>
<li>数据总线：数据总线是CPU和其它组件（比如：内存）之间进行数据交互的通道。</li>
<li>数据总线宽度：是指CPU中寄存器的位数，即CPU位数，我们常说的32位，64位就是指的这个参数。CPU的位数和CPU的寻址能力没有关系。我们之前经常听到32位的CPU最大寻址能力是2<sup>32</sup> 因此它最大可识别的内存是4G，64位CPU可以识别4G以上内存，其实这是不正确的，因为CPU的寻址能力和CPU的位数没有关系。</li>
<li>地址总线：CPU是通过地址总线来进行内存寻址。</li>
<li>地址总线宽度：地址总线宽度决定了CPU的寻址范围，如果地址总线是32位，那么该CPU的寻址范围就是0-2<sup>32</sup>-1（0x00000000-0xFFFFFFFF），也就是4G个存储单元，如果存储单元是按字节编址，那么CPU可以寻址的最大内存量就是4G(byte)，这时候即使有再大的内存也不会被识别。</li>
<li>控制总线：主要是将CPU的控制指令传送到其它组件</li>
</ol>


<p>关于总线更详细的文章网上有很多，例如：</p>

<ul>
<li><a href="http://share.onlinesjtu.com/mod/tab/view.php?id=253">总线的内部结构</a></li>
<li><a href="http://my.oschina.net/u/158589/blog/70813">CPU位数，寻址能力，指令集，寄存器位数，操作系统位数</a></li>
</ul>


<!--more-->


<h3>2. 关于内存的几个概念</h3>

<ol>
<li>存储元：是存储器的最小存储单位，它可以存放一个二进制代码。</li>
<li>存储单元：若干个存储元构成一个存储单元，每个存储单元可以存放一个字节（按字节编址），或者存放一个字（按字编址）,当然理论上也存在按bit编址的可能，当然用的非常少。一个字是几个字节呢？这个看计算机的具体实现。</li>
<li>存储单元地址：每个存储单元的编号，一般用一个十六进制数来表示。CPU就是根据这个地址访问存储单元中的数据。</li>
<li>存储器：若干个存储单元构成一个存储器。</li>
</ol>


<p>关于内存更详细的文章网上也有很多，例如：</p>

<ul>
<li><a href="http://www.baike.com/wiki/%E5%AD%98%E5%82%A8%E5%99%A8">互动百科-存储器</a></li>
</ul>


<p>总结：了解一下CPU和内存的底层结构，再去学习底层程序实现的时候就不会感到那么迷茫了（一个数据到底在内存中是怎么存的呢？）。</p>
]]></content>
  </entry>
  
</feed>
