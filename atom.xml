<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hello World]]></title>
  <link href="http://mallven.com//atom.xml" rel="self"/>
  <link href="http://mallven.com//"/>
  <updated>2015-07-11T18:43:46+08:00</updated>
  <id>http://mallven.com//</id>
  <author>
    <name><![CDATA[Mallven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java's memory model and Object allocation]]></title>
    <link href="http://mallven.com//blog/2015/03/24/jvm-memory-structure-and-object-allocation/"/>
    <updated>2015-03-24T14:12:42+08:00</updated>
    <id>http://mallven.com//blog/2015/03/24/jvm-memory-structure-and-object-allocation</id>
    <content type="html"><![CDATA[<h3>1. Java&rsquo;s memory model</h3>

<p>From Java 2 Standard Edition, Java performs automatic memory management. In order to enhance the garbage collection&rsquo;s efficiency, Java bring in generational memory model. <br/>
Figure 1 is a picture I find from &ldquo;pointsoftware.com&rdquo;</p>

<p><img src="http://mallven.com//images/blog/2015-03/20150324-RuntimeDataAreas_JVM_Model.png" alt="java memeory model" /></p>

<!--more-->


<p>Heap Space: we must be familar with this area, The objects we create are stored  in this area. To improve the efficiency of garbage collection, this area is divided into two separate areas:<code>Young Generation</code> and <code>Old Generation</code>, For the same reason <code>Young Generation</code> is divided into three parts : <code>Eden</code>, <code>Survivor 0 (From)</code>, <code>Survivor 1 (To)</code>. The default ratios of these three areas is <code>8:1:1</code>, We can also change it by specify parameter  <code>-XX:SurvivorRatio</code> in command line while jvm start up.   <code>Old Generation</code> holds the objects that have survived after several circulations(default value is 15) of garbage collections and objects have big size such as arrays.</p>

<p>Method Area:  also known as the <code>Permanent Generation</code>, All class data are loaded into this memory space, This include Runtime Constant Pool, Field, Method Data, Code. Note: Method Area has been removed from jvm in JDK8.  The data stored in Method area before are stored in a new memeory  space same as <code>Native Area</code> named <code>Metaspace</code>.</p>

<p>Native Area: This area is  used by threads and holds the references to the code and object data in the heap, <code>Native Area</code> also stores the local variables of primitive types.</p>

<h3>2. How an object is allocated</h3>

<p>Figure 2 is a picture I find from ifeve.com</p>

<p><img src="http://mallven.com//images/blog/2015-03/20150324-eden_survivor.png" alt="allocate memory for objects" /></p>

<h4>Allocating Steps</h4>

<ol>
<li>if the object is big or an array, it will be directly allocated on the <code>Old Generation</code>.</li>
<li>if it is a normal object, Jvm will try to allocate it on the <code>Eden</code>.</li>
<li>if <code>Eden</code> is full, minorGC will be triggered, live objects in <code>Eden</code> and one  <code>Survivor[From]</code> will be moved to another  <code>Survivor[To]</code>. The objects old enough(default is 15 years old) will be moved to <code>Old Generation</code>. After that, these two Survivor will exchange their role.</li>
<li>if  <code>To Survivor</code> is full, the objects in <code>To Survivor</code> will be moved to <code>Old Generation</code></li>
<li>if <code>Old Generation</code> is full, <code>Full GC</code> will be invoked.</li>
<li>if heap also has no enough memeory after <code>Full GC</code>, jvm will throw <code>OutOfMemoryException</code></li>
</ol>


<h4>Note:</h4>

<p>In order to improve the efficiency of object allocation, Java use <code>TLAB(Thread Local Allocation Buffer)</code> technology to allocate memory, Because allocate data on <code>Eden</code> directly can cause concurrent problems, so JVM need to lock the memory before the allocation and unlock the memory after the allocation, this will make memory allocation a bottleneck.</p>

<h5>So, what is the <code>TLAB</code> ?</h5>

<p>JVM use 1% of the <code>Eden</code> area as the <code>TLAB</code> space, each Thread will be given a specified space to allocate their own object, so objects are allocated in their own Thread, thus, there is no lock needed during the allocation, so <code>TLAB</code> will be more efficient than the direct allocation.  Only the space of the thread is exhausted and need to increase new spaces the synchronized lock need to be added.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How HashMap Works]]></title>
    <link href="http://mallven.com//blog/2015/03/16/how-hashmap-works/"/>
    <updated>2015-03-16T13:57:42+08:00</updated>
    <id>http://mallven.com//blog/2015/03/16/how-hashmap-works</id>
    <content type="html"><![CDATA[<h3>1.The Structure of HashMap</h3>

<p>As we know,all structures of object in Java are based on array and reference,HashMap is same too. A HashMap structure consist of two parts:Array and LinkList(Figure 1).</p>

<p><img src="http://mallven.com//images/blog/2015-03/20150316-hashmap-structure.png" alt="HashMap Structure" /></p>

<!--more-->


<p>When we put a new item to a HashMap, First of all, HashMap will use hash algorithm to calculate the hashcode of the given key. Then use this hashcode to mod the capacity of the array to get the index of the array which will store the reference of this object. If the space of this index was already used by other object, HashMap will use linklist structure to store these object, the new one will be added before to the old one, And the  first one&rsquo;s reference is stored in this specified index of the array.</p>

<p>fragments of HashMap source code<br/>
Array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">transient</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">table</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[])</span> <span class="n">EMPTY_TABLE</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>LinkList Node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Entry</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="n">K</span> <span class="n">k</span><span class="o">,</span> <span class="n">V</span> <span class="n">v</span><span class="o">,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>          <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span><span class="c1">//point to the next entry </span>
</span><span class='line'>          <span class="n">key</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>          <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.How hash function find the bucket location of the given key</h3>

<p>From figure 1 ,we can know that If we want to find an object from HashMap,we must use the hashcode of the key to find the bucket’s location in the entry array.This is how HashMap in Java does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>h &amp; (length-1) means h mod (length-1), but bits operation is more efficient than mod operation.<br/>
but we notice that there is a line of comment “length must be a non-zero power of 2”,why power of 2? and why (length-1) not length.</p>

<h4>2.1  why is length-1?</h4>

<p>Okay, because h &amp; (length-1) equals h % length.</p>

<h4>2.2  why the length must be power of 2</h4>

<p>If we want to get a value from HashMap efficiently,the ideal situation is that every bucket only has one entry,so we can get the object directly without  traversing the linklist.  So we need the value are stored in the array evenly. But how HashMap make a hashcode evenly? The implementation in Java:</p>

<h5>1.First,choose a suitable length to hash table array:</h5>

<p>We will do a contrast experiment to find the advantange of using the power of 2 as the length of array.</p>

<p>condition 1 : <code>length = 2^4 = 16, hash = 13 or hash = 12</code></p>

<p><img src="http://mallven.com//images/blog/2015-03/20150316-hashmap-hash-to-index-1.png" alt="contrast experiment" /></p>

<p>condition 2 : <code>length = 15, hash = 13 or hash = 12</code></p>

<p><img src="http://mallven.com//images/blog/2015-03/20150316-hashmap-hash-to-index-2.png" alt="contrast experiment" /></p>

<p>From figure 2 we can find that when we use 15 as the length of array hash=13 and hash=12 will get the same index=12, this is hash collision, beacuse if we use 2<sup>N</sup> as the length, we can guarantee length-1 has more 1 bits data in the binary representation than no use 2<sup>N</sup> as the length. So use power of 2 as length can reduce hash collision between two different hashcode.</p>

<h5>2.Second : bit shift</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two lines  can ensure that every change of bit of hashcode can affect the final result of bucket index calculating.</p>

<h3>3.The capacity of HashMap</h3>

<h4>3.1 How many entries can be hold by an HashMap? only restricted by the system memory?</h4>

<p>The answer is no, the maximum capacity of a HashMap is 2<sup>30</sup>, this value is defined in the class file of HashMap</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">30</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.2 What is the default capacity of HashMap?</h4>

<p>The default capactity is 2<sup>4</sup>, we can specify the initial capacity in either of the constructors with arguments, but must be a power of two. If we specify a capacity not a power of two, HashMap will find a number of a power of two closet to the specified capacity  as the final capacity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Find a power of 2 &gt;= toSize</span>
</span><span class='line'><span class="kt">int</span> <span class="n">capacity</span> <span class="o">=</span> <span class="n">roundUpToPowerOf2</span><span class="o">(</span><span class="n">toSize</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.3 How HashMap to resize</h4>

<p>HashMap has a variable named loadFactor to regulate when it needs to resize, if the amount of entries holded by HashMap over capacity*loadFactor, the resize function will be called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">capacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span><span class="o">)</span> <span class="o">?</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netbeans debug hotspot]]></title>
    <link href="http://mallven.com//blog/2014/06/21/netbeans-debug-hotspot/"/>
    <updated>2014-06-21T18:02:59+08:00</updated>
    <id>http://mallven.com//blog/2014/06/21/netbeans-debug-hotspot</id>
    <content type="html"><![CDATA[<p>学习JVM的过程中肯定不能少了对JVM的调试，进行就学习一下怎样用Netbeans调试Hotspot。</p>

<h4>编译过程</h4>

<p>环境：</p>

<blockquote><p>Ubuntu12.04<br/>
OpenJdk 7u<br/>
Netbeans7.0.1(c/c++)</p></blockquote>

<p>1.安装编译所需要的工具。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">ant</span> <span class="n">mercurial</span> <span class="n">gawk</span> <span class="n">g</span><span class="o">++</span> <span class="n">libcups2</span><span class="o">-</span><span class="n">dev</span> <span class="n">libasound2</span><span class="o">-</span><span class="n">dev</span> <span class="n">libfreetype6</span><span class="o">-</span><span class="n">dev</span> <span class="n">libx11</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxt</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxext</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxrender</span><span class="o">-</span><span class="n">dev</span> <span class="n">libxtst</span><span class="o">-</span><span class="n">dev</span> <span class="n">libfontconfig1</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>2.clone openjdk</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hg</span> <span class="n">clone</span> <span class="nl">http:</span><span class="c1">//hg.openjdk.java.net/jdk7u/jdk7u/ jdk7u</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.进入jdk7u目录，执行下面的脚本下载openjdk源代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">get_source</span><span class="o">.</span><span class="na">sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.开始编译OpenJdk,为了方便写个小脚本(build.sh),该脚本的Gist的地址:<a href="https://gist.github.com/zarue/0c6dd39d3e271888f02d#file-1-build-sh">查看</a>,将该脚本放在jdk7u目录下面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'><span class="n">unset</span> <span class="n">JAVA_HOME</span>
</span><span class='line'><span class="n">export</span> <span class="n">LANG</span><span class="o">=</span><span class="n">C</span>
</span><span class='line'><span class="err">#必须开启，</span><span class="n">jdk</span><span class="err">在编译过程中会联网下载一些</span><span class="n">openjdk</span><span class="err">本身未包含的第三方库</span>
</span><span class='line'><span class="n">export</span> <span class="n">ALLOW_DOWNLOADS</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">USE_PRECOMPILED_HEADER</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">SKIP_DEBUG_BUILD</span><span class="o">=</span><span class="kc">false</span>
</span><span class='line'><span class="n">export</span> <span class="n">SKIP_FASTDEBUG_BUILD</span><span class="o">=</span><span class="kc">true</span>
</span><span class='line'><span class="n">export</span> <span class="n">DEBUG_NAME</span><span class="o">=</span><span class="n">debug</span>
</span><span class='line'><span class="err">#</span><span class="n">ALT_BOOTDIR</span> <span class="err">是你本机</span><span class="n">jdk</span><span class="err">的目录</span>
</span><span class='line'><span class="n">export</span> <span class="n">ALT_BOOTDIR</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">6.0</span><span class="n">_45</span>
</span><span class='line'><span class="n">source</span> <span class="n">jdk</span><span class="o">/</span><span class="n">make</span><span class="o">/</span><span class="n">jdk_generic_profile</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'><span class="n">make</span> <span class="n">sanity</span> <span class="o">&amp;&amp;</span> <span class="n">make</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.执行build.sh 开始编译过程，大约耗时20-30分分钟</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">./</span><span class="n">build</span><span class="o">.</span><span class="na">sh</span>
</span></code></pre></td></tr></table></div></figure>


<h4>可能遇到的问题:</h4>

<p>1、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">.</span><span class="na">src</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">vm</span><span class="o">/</span><span class="n">runtime</span><span class="o">/</span><span class="n">interfaceSupport</span><span class="o">.</span><span class="na">hpp</span><span class="o">:</span><span class="mi">430</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span> <span class="nl">error:</span> <span class="s">&quot;__LEAF&quot;</span> <span class="n">redefined</span> <span class="o">[-</span><span class="n">Werror</span><span class="o">]</span>
</span><span class='line'><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">cdefs</span><span class="o">.</span><span class="na">h</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span> <span class="nl">note:</span> <span class="k">this</span> <span class="n">is</span> <span class="n">the</span> <span class="n">location</span>
</span><span class='line'><span class="n">of</span> <span class="n">the</span> <span class="n">previous</span> <span class="n">definition</span>
</span></code></pre></td></tr></table></div></figure>


<p>有两种解决方法: <br/>
1.参考这个：<a href="http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/a6eef545f1a2">http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/a6eef545f1a2</a>  <br/>
2.这个问题在jdk7u中已经修复，直接使用jdk7u版本的源码就可以了。</p>

<p>2、&#8221;*** This OS is not supported:&ldquo; &lsquo;uname -a&rsquo;; exit 1;
解决方法:<br/>
uname -r<br/>
#查看当前的内核版本：3.11.0-15-generic<br/>
找到下面的文件：/hotspot/make/linux/Makefile <br/>
#在这行最后加上当前的内核版本3.11%，<br/>
 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 2.7% 3.11%</p>

<p>3、Error occurred during initialization of VM java/lang/NoClassDefFoundError: java/lang/invoke/AdapterMethodHandle  解决方法:<br/>
这是因为编译Openjdk的所用的Jdk版本不符合要求导致的，我这里用的<code>jdk1.6.0_45</code><br/>
如果还遇到其它问题可以自行Google,一般都能解决。</p>

<h4>使用Netbeans调试</h4>

<p>1.安装Netbeans7.0.1 我尝试了8.0，7.4 都不能正常进行Debug，最后换了7.0.1就正常了，这里仅供参考。<br/>
2.新建一个项目，选择“基于现有源代码的C/C++项目”，在“源代码文件夹目录”选择openjdk下的hotspot目录，“选择配置模式”中选择“定制”。</p>

<p>3.下一步，“使用现有的makefile”：选择hotspot/make目录下的Makefile文件。</p>

<p>4.构建：“构建命令”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">MAKE</span><span class="o">}</span> <span class="o">-</span><span class="n">f</span> <span class="n">Makefile</span> <span class="n">clean</span> <span class="n">jvmg</span> <span class="n">ALT_BOOTDIR</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">6.0</span><span class="n">_45</span> <span class="n">ARCH_DATA_MODEL</span><span class="o">=</span><span class="mi">64</span> <span class="n">LANG</span><span class="o">=</span><span class="n">C</span>   <span class="n">ZIP_DEBUGINFO_FILES</span><span class="o">=</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p> 如果你是64位系统那么需要指定ARCH_DATA_MODEL=64，另外如果不指定ZIP_DEBUGINFO_FILES=0，那么需要在编译完成后到jvmg目录下面执行unzip libjvm.diz 解压出调试需要的符号信息。否则将不能进行调试。</p>

<p>5.运行-运行命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;/home/cheney/soft/jdk7u/hotspot/build/linux/linux_amd64_compiler2/jvmg/gamma&quot;</span>   <span class="o">-</span><span class="nl">XX:</span><span class="n">StopInterpreterAt</span><span class="o">=</span><span class="mi">1</span> <span class="n">Test</span>
</span></code></pre></td></tr></table></div></figure>


<p>-XX:StopInterpreterAt=1的作用是当遇到序号为<n>的字节码指令时，便会中断程序执行，进入断点调试，但是我不指定这个参数也照样可以进行调试。Test 是我自己写的测试类，以后如果想调试哪个类就在这里更换。</p>

<p>6.运行-环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LD_LIBRARY_PATH</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">soft</span><span class="o">/</span><span class="n">jdk7u</span><span class="o">/</span><span class="n">hotspot</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">linux_amd64_compiler2</span><span class="o">/</span><span class="n">jvmg</span>
</span><span class='line'><span class="n">JAVA_HOME</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span><span class="o">/</span><span class="n">soft</span><span class="o">/</span><span class="n">jdk7u</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">linux</span><span class="o">-</span><span class="n">amd64</span><span class="o">/</span><span class="n">j2sdk</span><span class="o">-</span><span class="n">image</span>
</span><span class='line'><span class="n">CLASSPATH</span><span class="o">=</span><span class="n">$</span><span class="o">{</span><span class="n">JAVA_HOME</span><span class="o">}/</span><span class="n">lib</span><span class="o">/</span><span class="n">dt</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">$</span><span class="o">{</span><span class="n">JAVA_HOME</span><span class="o">}/</span><span class="n">lib</span><span class="o">/</span><span class="n">tools</span><span class="o">.</span><span class="na">jar</span><span class="o">:/</span><span class="n">home</span><span class="o">/</span><span class="n">cheney</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这里要把Test所在的目录添加到环境CLASSPATH里面。</p>

<p>7.接下来就是等待编译过程了，编译完成之后就可以进行调试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 Java对象创建[初始化]]]></title>
    <link href="http://mallven.com//blog/2014/06/15/java-object-create-2/"/>
    <updated>2014-06-15T10:01:00+08:00</updated>
    <id>http://mallven.com//blog/2014/06/15/java-object-create-2</id>
    <content type="html"><![CDATA[<p>上一篇文章简单介绍了类的加载和连接阶段，今天来简单看一下类的初始化过程。<br/>
还是使用上文的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span> <span class="n">claszz</span> <span class="o">=</span> <span class="n">clt</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Animal&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="o">(</span><span class="n">Animal</span><span class="o">)</span><span class="n">claszz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>newInstance</code>的native方法在:src/share/native/sun/reflect/NativeAccessors.c</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span> <span class="nf">Java_sun_reflect_NativeConstructorAccessorImpl_newInstance0</span>
</span><span class='line'><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jclass</span> <span class="n">unused</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">c</span><span class="o">,</span> <span class="n">jobjectArray</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="nf">JVM_NewInstanceFromConstructor</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><code>JVM_NewInstanceFromConstructor</code>在jvm.cpp 中的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jobject</span><span class="o">,</span> <span class="n">JVM_NewInstanceFromConstructor</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">c</span><span class="o">,</span> <span class="n">jobjectArray</span> <span class="n">args0</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper</span><span class="o">(</span><span class="s">&quot;JVM_NewInstanceFromConstructor&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">oop</span> <span class="n">constructor_mirror</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'><span class="n">objArrayHandle</span> <span class="nf">args</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">objArrayOop</span><span class="o">(</span><span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">args0</span><span class="o">)));</span>
</span><span class='line'><span class="n">oop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">Reflection:</span><span class="o">:</span><span class="n">invoke_constructor</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="n">jobject</span> <span class="n">res</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_vm_object_alloc</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_vm_object_alloc</span><span class="o">(</span><span class="nl">JavaThread:</span><span class="o">:</span><span class="n">current</span><span class="o">(),</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>第4行：创建构造方法参数数组。 <br/>
第5行：<code>invoke_constructor(...)</code>位于/src/share/vm/runtime/reflection.cpp,这个方法包含了对象的创建过程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">Reflection:</span><span class="o">:</span><span class="n">invoke_constructor</span><span class="o">(</span><span class="n">oop</span> <span class="n">constructor_mirror</span><span class="o">,</span> <span class="n">objArrayHandle</span> <span class="n">args</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">oop</span> <span class="n">mirror</span>             <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">clazz</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">slot</span>               <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">slot</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">override</span>          <span class="o">=</span> <span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">override</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">objArrayHandle</span> <span class="nf">ptypes</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">objArrayOop</span><span class="o">(</span><span class="nl">java_lang_reflect_Constructor:</span><span class="o">:</span><span class="n">parameter_types</span><span class="o">(</span><span class="n">constructor_mirror</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instanceKlassHandle</span> <span class="nf">klass</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">java_lang_Class:</span><span class="o">:</span><span class="n">as_klassOop</span><span class="o">(</span><span class="n">mirror</span><span class="o">));</span>
</span><span class='line'>  <span class="n">methodOop</span> <span class="n">m</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">method_with_idnum</span><span class="o">(</span><span class="n">slot</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">THROW_MSG_0</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_InternalError</span><span class="o">(),</span> <span class="s">&quot;invoke&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">methodHandle</span> <span class="nf">method</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">method</span><span class="o">-&gt;</span><span class="n">name</span><span class="o">()</span> <span class="o">==</span> <span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">object_initializer_name</span><span class="o">(),</span> <span class="s">&quot;invalid constructor&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Make sure klass gets initialize</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">-&gt;</span><span class="n">initialize</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create new instance (the receiver)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">-&gt;</span><span class="n">check_valid_for_instantiation</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">allocate_instance_handle</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Ignore result from call and return receiver</span>
</span><span class='line'>  <span class="n">invoke</span><span class="o">(</span><span class="n">klass</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">receiver</span><span class="o">,</span> <span class="n">override</span><span class="o">,</span> <span class="n">ptypes</span><span class="o">,</span> <span class="n">T_VOID</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">receiver</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接从为对象分配内存开始看src/share/vm/oops/instanceKlass.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handle</span> <span class="n">receiver</span> <span class="o">=</span> <span class="n">klass</span><span class="o">-&gt;</span><span class="n">allocate_instance_handle</span><span class="o">(</span><span class="n">CHECK_NULL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续看:<code>allocate_instance(...)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceOop</span> <span class="nl">instanceKlass:</span><span class="o">:</span><span class="n">allocate_instance</span><span class="o">(</span><span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">has_finalizer_flag</span> <span class="o">=</span> <span class="n">has_finalizer</span><span class="o">();</span> <span class="c1">// Query before possible GC</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">size_helper</span><span class="o">();</span>  <span class="c1">// Query before forming handle.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">KlassHandle</span> <span class="nf">h_k</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">as_klassOop</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instanceOop</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="n">instanceOop</span><span class="o">)</span><span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">obj_allocate</span><span class="o">(</span><span class="n">h_k</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">has_finalizer_flag</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">RegisterFinalizersAtInit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">register_finalizer</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第9行:<code>i = (instanceOop)CollectedHeap::obj_allocate(h_k, size, CHECK_NULL);</code>位于collectedHeap.inline.hpp中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">obj_allocate</span><span class="o">(</span><span class="n">KlassHandle</span> <span class="n">klass</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">debug_only</span><span class="o">(</span><span class="n">check_for_valid_allocation_state</span><span class="o">());</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_gc_active</span><span class="o">(),</span> <span class="s">&quot;Allocation during gc not allowed&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;int won&#39;t convert to size_t&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">common_mem_allocate_init</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">post_allocation_setup_obj</span><span class="o">(</span><span class="n">klass</span><span class="o">,</span> <span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">check_for_bad_heap_word_value</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">oop</span><span class="o">)</span><span class="n">obj</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下<code>common_mem_allocate_init(size, false, CHECK_NULL);</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">common_mem_allocate_init</span><span class="o">(</span><span class="n">size_t</span> <span class="n">size</span><span class="o">,</span> <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">common_mem_allocate_noinit</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">init_obj</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续看<code>common_mem_allocate_noinit(...)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">common_mem_allocate_noinit</span><span class="o">(</span><span class="n">size_t</span> <span class="n">size</span><span class="o">,</span> <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Clear unhandled oops for memory allocation.  Memory allocation might</span>
</span><span class='line'>  <span class="c1">// not take out a lock if from tlab, so clear here.</span>
</span><span class='line'>  <span class="n">CHECK_UNHANDLED_OOPS_ONLY</span><span class="o">(</span><span class="n">THREAD</span><span class="o">-&gt;</span><span class="n">clear_unhandled_oops</span><span class="o">();)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="n">guarantee</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="s">&quot;Should not allocate with exception pending&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>  <span class="c1">// caller does a CHECK_0 too</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We may want to update this, is_noref objects might not be allocated in TLABs.</span>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UseTLAB</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">allocate_from_tlab</span><span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">assert</span><span class="o">(!</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">,</span>
</span><span class='line'>             <span class="s">&quot;Unexpected exception, will result in uninitialized storage&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">mem_allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                          <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                          <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>                                          <span class="o">&amp;</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">NOT_PRODUCT</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span>
</span><span class='line'>      <span class="n">check_for_non_bad_heap_word_value</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span><span class='line'>    <span class="k">assert</span><span class="o">(!</span><span class="n">HAS_PENDING_EXCEPTION</span><span class="o">,</span>
</span><span class='line'>           <span class="s">&quot;Unexpected exception, will result in uninitialized storage&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// -XX:+HeapDumpOnOutOfMemoryError and -XX:OnOutOfMemoryError support</span>
</span><span class='line'>    <span class="n">report_java_out_of_memory</span><span class="o">(</span><span class="s">&quot;Java heap space&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_resource_exhausted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_resource_exhausted</span><span class="o">(</span>
</span><span class='line'>        <span class="n">JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR</span> <span class="o">|</span> <span class="n">JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Java heap space&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">THROW_OOP_0</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">out_of_memory_error_java_heap</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// -XX:+HeapDumpOnOutOfMemoryError and -XX:OnOutOfMemoryError support</span>
</span><span class='line'>    <span class="n">report_java_out_of_memory</span><span class="o">(</span><span class="s">&quot;GC overhead limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">should_post_resource_exhausted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">JvmtiExport:</span><span class="o">:</span><span class="n">post_resource_exhausted</span><span class="o">(</span>
</span><span class='line'>        <span class="n">JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR</span> <span class="o">|</span> <span class="n">JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;GC overhead limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">THROW_OOP_0</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">out_of_memory_error_gc_overhead_limit</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第15行，如果启用了UseTLAB则优先在TLAB上分配：allocate_from_tlab(&hellip;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HeapWord</span><span class="o">*</span> <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">allocate_from_tlab</span><span class="o">(</span><span class="n">Thread</span><span class="o">*</span> <span class="n">thread</span><span class="o">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">UseTLAB</span><span class="o">,</span> <span class="s">&quot;should use UseTLAB&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">thread</span><span class="o">-&gt;</span><span class="n">tlab</span><span class="o">().</span><span class="na">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// Otherwise...</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">allocate_from_tlab_slow</span><span class="o">(</span><span class="n">thread</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在TLAB分配失败则调用<code>allocate_from_tlab_slow(...)</code>，该方法会重新计算TLAB的大小，然后重新创建一个新的TLAB用于分配该对象。 <br/>
如果<code>allocate_from_tlab_slow(...)</code>也没成功，则调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">mem_allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                          <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                          <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>                                          <span class="o">&amp;</span><span class="n">gc_overhead_limit_was_exceeded</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在共享内存区域分配内存。在该区域分配内存需要加锁，所以速度要比在TLAB上分配效率低一些。该方法位于：/src/share/vm/gc_implementation/parallelScavenge/parallelScavengeHeap.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">eapWord</span><span class="o">*</span> <span class="nl">ParallelScavengeHeap:</span><span class="o">:</span><span class="n">mem_allocate</span><span class="o">(</span>
</span><span class='line'>                                     <span class="n">size_t</span> <span class="n">size</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span> <span class="n">is_noref</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span> <span class="n">is_tlab</span><span class="o">,</span>
</span><span class='line'>                                     <span class="n">bool</span><span class="o">*</span> <span class="n">gc_overhead_limit_was_exceeded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">SafepointSynchronize:</span><span class="o">:</span><span class="n">is_at_safepoint</span><span class="o">(),</span> <span class="s">&quot;should not be at safepoint&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="nl">Thread:</span><span class="o">:</span><span class="n">current</span><span class="o">()</span> <span class="o">!=</span> <span class="o">(</span><span class="n">Thread</span><span class="o">*)</span><span class="nl">VMThread:</span><span class="o">:</span><span class="n">vm_thread</span><span class="o">(),</span> <span class="s">&quot;should not be in vm thread&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="n">Heap_lock</span><span class="o">-&gt;</span><span class="n">owned_by_self</span><span class="o">(),</span> <span class="s">&quot;this thread should not own the Heap_lock&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// In general gc_overhead_limit_was_exceeded should be false so</span>
</span><span class='line'>  <span class="c1">// set it so here and reset it to true only if the gc time</span>
</span><span class='line'>  <span class="c1">// limit is being exceeded as checked below.</span>
</span><span class='line'>  <span class="o">*</span><span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HeapWord</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">uint</span> <span class="n">loop_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="n">uint</span> <span class="n">gc_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// We don&#39;t want to have multiple collections for a single filled generation.</span>
</span><span class='line'>    <span class="c1">// To prevent this, each thread tracks the total_collections() value, and if</span>
</span><span class='line'>    <span class="c1">// the count has changed, does not do a new collection.</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// The collection count must be read only while holding the heap lock. VM</span>
</span><span class='line'>    <span class="c1">// operations also hold the heap lock during collections. There is a lock</span>
</span><span class='line'>    <span class="c1">// contention case where thread A blocks waiting on the Heap_lock, while</span>
</span><span class='line'>    <span class="c1">// thread B is holding it doing a collection. When thread A gets the lock,</span>
</span><span class='line'>    <span class="c1">// the collection count has already changed. To prevent duplicate collections,</span>
</span><span class='line'>    <span class="c1">// The policy MUST attempt allocations during the same period it reads the</span>
</span><span class='line'>    <span class="c1">// total_collections() value!</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">MutexLocker</span> <span class="nf">ml</span><span class="o">(</span><span class="n">Heap_lock</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gc_count</span> <span class="o">=</span> <span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">total_collections</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// (1) If the requested object is too large to easily fit in the</span>
</span><span class='line'>      <span class="c1">//     young_gen, or</span>
</span><span class='line'>      <span class="c1">// (2) If GC is locked out via GCLocker, young gen is full and</span>
</span><span class='line'>      <span class="c1">//     the need for a GC already signalled to GCLocker (done</span>
</span><span class='line'>      <span class="c1">//     at a safepoint),</span>
</span><span class='line'>      <span class="c1">// ... then, rather than force a safepoint and (a potentially futile)</span>
</span><span class='line'>      <span class="c1">// collection (attempt) for each allocation, try allocation directly</span>
</span><span class='line'>      <span class="c1">// in old_gen. For case (2) above, we may in the future allow</span>
</span><span class='line'>      <span class="c1">// TLAB allocation directly in the old gen.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">is_tlab</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">size</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">young_gen</span><span class="o">()-&gt;</span><span class="n">eden_space</span><span class="o">()-&gt;</span><span class="n">capacity_in_words</span><span class="o">(</span><span class="nl">Thread:</span><span class="o">:</span><span class="n">current</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">old_gen</span><span class="o">()-&gt;</span><span class="n">allocate</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="nl">GC_locker:</span><span class="o">:</span><span class="n">is_active_and_needs_gc</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// GC is locked out. If this is a TLAB allocation,</span>
</span><span class='line'>        <span class="c1">// return NULL; the requestor will retry allocation</span>
</span><span class='line'>        <span class="c1">// of an idividual object at a time.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">is_tlab</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If this thread is not in a jni critical section, we stall</span>
</span><span class='line'>        <span class="c1">// the requestor until the critical section has cleared and</span>
</span><span class='line'>        <span class="c1">// GC allowed. When the critical section clears, a GC is</span>
</span><span class='line'>        <span class="c1">// initiated by the last thread exiting the critical section; so</span>
</span><span class='line'>        <span class="c1">// we retry the allocation sequence from the beginning of the loop,</span>
</span><span class='line'>        <span class="c1">// rather than causing more, now probably unnecessary, GC attempts.</span>
</span><span class='line'>        <span class="n">JavaThread</span><span class="o">*</span> <span class="n">jthr</span> <span class="o">=</span> <span class="nl">JavaThread:</span><span class="o">:</span><span class="n">current</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">jthr</span><span class="o">-&gt;</span><span class="n">in_critical</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">MutexUnlocker</span> <span class="nf">mul</span><span class="o">(</span><span class="n">Heap_lock</span><span class="o">);</span>
</span><span class='line'>          <span class="nl">GC_locker:</span><span class="o">:</span><span class="n">stall_until_clear</span><span class="o">();</span>
</span><span class='line'>          <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">CheckJNICalls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fatal</span><span class="o">(</span><span class="s">&quot;Possible deadlock due to allocating while&quot;</span>
</span><span class='line'>                  <span class="s">&quot; in jni critical section&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Generate a VM operation</span>
</span><span class='line'>      <span class="n">VM_ParallelGCFailedAllocation</span> <span class="nf">op</span><span class="o">(</span><span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span><span class="o">,</span> <span class="n">gc_count</span><span class="o">);</span>
</span><span class='line'>      <span class="nl">VMThread:</span><span class="o">:</span><span class="n">execute</span><span class="o">(&amp;</span><span class="n">op</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Did the VM operation execute? If so, return the result directly.</span>
</span><span class='line'>      <span class="c1">// This prevents us from looping until time out on requests that can</span>
</span><span class='line'>      <span class="c1">// not be satisfied.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">prologue_succeeded</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">assert</span><span class="o">(</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_in_or_null</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()),</span>
</span><span class='line'>          <span class="s">&quot;result not in heap&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If GC was locked out during VM operation then retry allocation</span>
</span><span class='line'>        <span class="c1">// and/or stall as necessary.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">gc_locked</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">assert</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">,</span> <span class="s">&quot;must be NULL if gc_locked() is true&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="o">;</span>  <span class="c1">// retry and/or stall as necessary</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Exit the loop if the gc time limit has been exceeded.</span>
</span><span class='line'>        <span class="c1">// The allocation must have failed above (&quot;result&quot; guarding</span>
</span><span class='line'>        <span class="c1">// this path is NULL) and the most recent collection has exceeded the</span>
</span><span class='line'>        <span class="c1">// gc overhead limit (although enough may have been collected to</span>
</span><span class='line'>        <span class="c1">// satisfy the allocation).  Exit the loop so that an out-of-memory</span>
</span><span class='line'>        <span class="c1">// will be thrown (return a NULL ignoring the contents of</span>
</span><span class='line'>        <span class="c1">// op.result()),</span>
</span><span class='line'>        <span class="c1">// but clear gc_overhead_limit_exceeded so that the next collection</span>
</span><span class='line'>        <span class="c1">// starts with a clean slate (i.e., forgets about previous overhead</span>
</span><span class='line'>        <span class="c1">// excesses).  Fill op.result() with a filler object so that the</span>
</span><span class='line'>        <span class="c1">// heap remains parsable.</span>
</span><span class='line'>        <span class="kd">const</span> <span class="n">bool</span> <span class="n">limit_exceeded</span> <span class="o">=</span> <span class="n">size_policy</span><span class="o">()-&gt;</span><span class="n">gc_overhead_limit_exceeded</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">const</span> <span class="n">bool</span> <span class="n">softrefs_clear</span> <span class="o">=</span> <span class="n">collector_policy</span><span class="o">()-&gt;</span><span class="n">all_soft_refs_clear</span><span class="o">();</span>
</span><span class='line'>        <span class="k">assert</span><span class="o">(!</span><span class="n">limit_exceeded</span> <span class="o">||</span> <span class="n">softrefs_clear</span><span class="o">,</span> <span class="s">&quot;Should have been cleared&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">limit_exceeded</span> <span class="o">&amp;&amp;</span> <span class="n">softrefs_clear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">gc_overhead_limit_was_exceeded</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="n">size_policy</span><span class="o">()-&gt;</span><span class="n">set_gc_overhead_limit_exceeded</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">PrintGCDetails</span> <span class="o">&amp;&amp;</span> <span class="n">Verbose</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">gclog_or_tty</span><span class="o">-&gt;</span><span class="n">print_cr</span><span class="o">(</span><span class="s">&quot;ParallelScavengeHeap::mem_allocate: &quot;</span>
</span><span class='line'>              <span class="s">&quot;return NULL because gc_overhead_limit_exceeded is set&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">()</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="nl">CollectedHeap:</span><span class="o">:</span><span class="n">fill_with_object</span><span class="o">(</span><span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">(),</span> <span class="n">size</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">op</span><span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The policy object will prevent us from looping forever. If the</span>
</span><span class='line'>    <span class="c1">// time spent in gc crosses a threshold, we will bail out.</span>
</span><span class='line'>    <span class="n">loop_count</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">QueuedAllocationWarningCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="o">(</span><span class="n">loop_count</span> <span class="o">%</span> <span class="n">QueuedAllocationWarningCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">warning</span><span class="o">(</span><span class="s">&quot;ParallelScavengeHeap::mem_allocate retries %d times \n\t&quot;</span>
</span><span class='line'>              <span class="s">&quot; size=%d %s&quot;</span><span class="o">,</span> <span class="n">loop_count</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">is_tlab</span> <span class="o">?</span> <span class="s">&quot;(TLAB)&quot;</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先在young_gen 分配，如果young 分配失败，则触发一次GC，然后重新尝试从young上分配，如果再分配失败，则从old 上分配。<br/>
Java对象初始化并分配内存的过程基本就是这样了。这个过程中的很多细节我也还没有弄明白，接下来弄明白了再补过来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 Java对象创建[加载和连接]]]></title>
    <link href="http://mallven.com//blog/2014/06/14/java-object-create-1/"/>
    <updated>2014-06-14T08:53:49+08:00</updated>
    <id>http://mallven.com//blog/2014/06/14/java-object-create-1</id>
    <content type="html"><![CDATA[<p>Java对象的生命周期可以分为：加载，验证，准备，解析，初始化，使用，卸载 八个阶段。其中验证，准备，解析又被统称为连接，今天主要是简单看一下加载和连接，下一篇文章讲初始化。<br/>
<img src="http://mallven.com//images/blog/2014-06/20140614-java-load-pic.png" alt="对象生命周期" /><br/>
说明：</p>

<blockquote><p>本文章所涉及的代码Gist地址:<a href="https://gist.github.com/zarue/0d5f83fa8458a9298b9d">点击查看</a><br/>
本文使用是Jdk6u-Hotspot</p></blockquote>

<!--more-->


<p>要想了解jvm底层的对象创建过程，还是要首先找到一个入口。new关键字无疑是最先想到的，但是看着这段代码“new Animal()” ,我还是找不到什么有用的信息，于是又想到了另一种方式。自定义classloader。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于自定义classloader 的文章，一搜一大堆，这里就不多说了。我自己定义了一个简单的Classloader。代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassLoaderTest</span> <span class="kd">extends</span> <span class="n">ClassLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">findClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">classBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
</span><span class='line'>          <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>          <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">256</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span><span class="o">((</span><span class="n">length</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))!=-</span><span class="mi">1</span><span class="o">){</span>
</span><span class='line'>              <span class="n">bos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">classBytes</span> <span class="o">=</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>          <span class="n">bos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">classBytes</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="s">&quot;class not found:&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">defineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">classBytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">classBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">ClassLoaderTest</span> <span class="n">clt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassLoaderTest</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Class</span> <span class="n">claszz</span> <span class="o">=</span> <span class="n">clt</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&quot;Animal&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Animal</span> <span class="n">animal</span> <span class="o">=</span> <span class="o">(</span><span class="n">Animal</span><span class="o">)</span><span class="n">claszz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>findClass（） 方法主要是加载class文件,然后调用defineClass（&hellip;）。<br/>
看一下defineClass(&hellip;)的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">defineClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span>
</span><span class='line'>                                         <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">ClassFormatError</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">protectionDomain</span> <span class="o">=</span> <span class="n">preDefineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">source</span> <span class="o">=</span> <span class="n">defineClassSourceLocation</span><span class="o">(</span><span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">defineClass1</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="n">source</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassFormatError</span> <span class="n">cfe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">defineTransformedClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">,</span> <span class="n">cfe</span><span class="o">,</span>
</span><span class='line'>                                       <span class="n">source</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">postDefineClass</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">protectionDomain</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第5行：<code>preDefineClass(name, protectionDomain);</code>主要是进行一些预处理，比如检查名字是否合法，证书是否正确等等。有兴趣的自己看一下。<br/>
第11行：<code>defineClass1(...)</code>调用了native方法，这个方法位于：/share/native/java/lang/ClassLoader.c中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Java_java_lang_ClassLoader_defineClass1</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jstring</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jbyteArray</span> <span class="n">data</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jint</span> <span class="n">offset</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jint</span> <span class="n">length</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">jstring</span> <span class="n">source</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">jbyte</span> <span class="o">*</span><span class="n">body</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">utfName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">utfSource</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">sourceBuf</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowNullPointerException</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowArrayIndexOutOfBoundsException</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="o">(</span><span class="n">jbyte</span> <span class="o">*)</span><span class="n">malloc</span><span class="o">(</span><span class="n">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">body</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">GetByteArrayRegion</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">body</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">((*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">ExceptionOccurred</span><span class="o">(</span><span class="n">env</span><span class="o">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">free_body</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfName</span> <span class="o">=</span> <span class="n">getUTF</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">buf</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">utfName</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">NULL</span><span class="o">);</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">free_body</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">VerifyFixClassname</span><span class="o">(</span><span class="n">utfName</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfName</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">source</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfSource</span> <span class="o">=</span> <span class="n">getUTF</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">sourceBuf</span><span class="o">,</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">sourceBuf</span><span class="o">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">utfSource</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">JNU_ThrowOutOfMemoryError</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">NULL</span><span class="o">);</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">free_utfName</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">utfSource</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">JVM_DefineClassWithSource</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">utfName</span><span class="o">,</span> <span class="n">loader</span><span class="o">,</span> <span class="n">body</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">pd</span><span class="o">,</span> <span class="n">utfSource</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">utfSource</span> <span class="o">&amp;&amp;</span> <span class="n">utfSource</span> <span class="o">!=</span> <span class="n">sourceBuf</span><span class="o">)</span>
</span><span class='line'>        <span class="n">free</span><span class="o">(</span><span class="n">utfSource</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nl">free_utfName:</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">utfName</span> <span class="o">&amp;&amp;</span> <span class="n">utfName</span> <span class="o">!=</span> <span class="n">buf</span><span class="o">)</span>
</span><span class='line'>        <span class="n">free</span><span class="o">(</span><span class="n">utfName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nl">free_body:</span>
</span><span class='line'>    <span class="n">free</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第33行：<code>(*env)-&gt;GetByteArrayRegion(env, data, offset, length, body);</code>把传进来的clas对应的字节数组复制给body。<code>GetByteArrayRegion</code>此函数将Java传来的字节数组data，复制offset->length长度的数据给body。<br/>
第39行：把name转为UTF格式。<br/>
第58行：<code>JVM_DefineClassWithSource(env, utfName, loader, body, length, pd, utfSource);</code>该方法位于:<code>/share/vm/prims/jvm.cpp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jclass</span><span class="o">,</span> <span class="n">JVM_DefineClassWithSource</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span> <span class="kd">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">buf</span><span class="o">,</span>
</span><span class='line'> <span class="n">jsize</span> <span class="n">len</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">source</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper2</span><span class="o">(</span><span class="s">&quot;JVM_DefineClassWithSource %s&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nf">jvm_define_class_common</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">loader</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">pd</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>
调用了<code>jvm_define_class_common(...)</code>方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">jclass</span> <span class="nf">jvm_define_class_common</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jobject</span> <span class="n">loader</span><span class="o">,</span> <span class="kd">const</span> <span class="n">jbyte</span> <span class="o">*</span><span class="n">buf</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jsize</span> <span class="n">len</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">pd</span><span class="o">,</span> <span class="kd">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">source</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">jboolean</span> <span class="n">verify</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">source</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span>  <span class="n">source</span> <span class="o">=</span> <span class="s">&quot;__JVM_DefineClass__&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="n">THREAD</span><span class="o">-&gt;</span><span class="n">is_Java_thread</span><span class="o">(),</span> <span class="s">&quot;must be a JavaThread&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">JavaThread</span><span class="o">*</span> <span class="n">jt</span> <span class="o">=</span> <span class="o">(</span><span class="n">JavaThread</span><span class="o">*)</span> <span class="n">THREAD</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PerfClassTraceTime</span> <span class="nf">vmtimer</span><span class="o">(</span><span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclass_time</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclass_selftime</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_define_appclasses</span><span class="o">(),</span>
</span><span class='line'>                             <span class="n">jt</span><span class="o">-&gt;</span><span class="n">get_thread_stat</span><span class="o">()-&gt;</span><span class="n">perf_recursion_counts_addr</span><span class="o">(),</span>
</span><span class='line'>                             <span class="n">jt</span><span class="o">-&gt;</span><span class="n">get_thread_stat</span><span class="o">()-&gt;</span><span class="n">perf_timers_addr</span><span class="o">(),</span>
</span><span class='line'>                             <span class="nl">PerfClassTraceTime:</span><span class="o">:</span><span class="n">DEFINE_CLASS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UsePerfData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">perf_app_classfile_bytes_read</span><span class="o">()-&gt;</span><span class="n">inc</span><span class="o">(</span><span class="n">len</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Since exceptions can be thrown, class initialization can take place</span>
</span><span class='line'>  <span class="c1">// if name is NULL no check for class name in .class stream has to be made.</span>
</span><span class='line'>  <span class="n">symbolHandle</span> <span class="n">class_name</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">const</span> <span class="kt">int</span> <span class="n">str_len</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">strlen</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">str_len</span> <span class="o">&gt;</span> <span class="nl">symbolOopDesc:</span><span class="o">:</span><span class="n">max_length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// It&#39;s impossible to create this class;  the name cannot fit</span>
</span><span class='line'>      <span class="c1">// into the constant pool.</span>
</span><span class='line'>      <span class="n">THROW_MSG_0</span><span class="o">(</span><span class="nl">vmSymbols:</span><span class="o">:</span><span class="n">java_lang_NoClassDefFoundError</span><span class="o">(),</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">class_name</span> <span class="o">=</span> <span class="nl">oopFactory:</span><span class="o">:</span><span class="n">new_symbol_handle</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">str_len</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassFileStream</span> <span class="nf">st</span><span class="o">((</span><span class="n">u1</span><span class="o">*)</span> <span class="n">buf</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span> <span class="o">*)</span><span class="n">source</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="nf">class_loader</span> <span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">loader</span><span class="o">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">UsePerfData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">is_lock_held_by_thread</span><span class="o">(</span><span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                           <span class="nl">ClassLoader:</span><span class="o">:</span><span class="n">sync_JVMDefineClassLockFreeCounter</span><span class="o">(),</span>
</span><span class='line'>                           <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Handle</span> <span class="nf">protection_domain</span> <span class="o">(</span><span class="n">THREAD</span><span class="o">,</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve</span><span class="o">(</span><span class="n">pd</span><span class="o">));</span>
</span><span class='line'>  <span class="n">klassOop</span> <span class="n">k</span> <span class="o">=</span> <span class="nl">SystemDictionary:</span><span class="o">:</span><span class="n">resolve_from_stream</span><span class="o">(</span><span class="n">class_name</span><span class="o">,</span> <span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">protection_domain</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">verify</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">TraceClassResolution</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">trace_class_resolution</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">(</span><span class="n">jclass</span><span class="o">)</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="nl">Klass:</span><span class="o">:</span><span class="n">cast</span><span class="o">(</span><span class="n">k</span><span class="o">)-&gt;</span><span class="n">java_mirror</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第35行：把传入的字节数组转换为<code>ClassFileStream</code>对象，以后所有的class数据的提取，分析，验证，转换等都将依托于该对象，和之前的数组没有关系了。<br/>
第43行：调用<code>SystemDictionary::resolve_from_stream(...)</code>进行class对象的解析工作。该方法位于：<code>share/vm/classfile/systemDictionary.cpp</code><br/>
看一下这个方法里面的几行主要代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceKlassHandle</span> <span class="n">k</span> <span class="o">=</span> <span class="n">ClassFileParser</span><span class="o">(</span><span class="n">st</span><span class="o">).</span><span class="na">parseClassFile</span><span class="o">(</span><span class="n">class_name</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">class_loader</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">protection_domain</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">parsed_name</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">verify</span><span class="o">,</span>
</span><span class='line'>                                                             <span class="n">THREAD</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用了ClassFileParser的parseClassFile方法，这个方法里面完成Class对象的构建过程。代码位置:<code>src/share/vm/classfile/classFileParser.cpp</code><br/>
说道这里就要了解一下Class文件的格式了，<a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html">Java语言规范</a>中是这么规定的,其实单讲这个格式也够写一篇文章的，这里不深入，有兴趣的自己网上搜吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClassFile</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">u4</span>             <span class="n">magic</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">minor_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">major_version</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">constant_pool_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">cp_info</span>        <span class="n">constant_pool</span><span class="o">[</span><span class="n">constant_pool_count</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">access_flags</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">this_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">super_class</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">interfaces</span><span class="o">[</span><span class="n">interfaces_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">fields_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">field_info</span>     <span class="n">fields</span><span class="o">[</span><span class="n">fields_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">methods_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">method_info</span>    <span class="n">methods</span><span class="o">[</span><span class="n">methods_count</span><span class="o">];</span>
</span><span class='line'>    <span class="n">u2</span>             <span class="n">attributes_count</span><span class="o">;</span>
</span><span class='line'>    <span class="n">attribute_info</span> <span class="n">attributes</span><span class="o">[</span><span class="n">attributes_count</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再回到parseClassFile方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">u4</span> <span class="n">magic</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u4_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="n">guarantee_property</span><span class="o">(</span><span class="n">magic</span> <span class="o">==</span> <span class="n">JAVA_CLASSFILE_MAGIC</span><span class="o">,</span>
</span><span class='line'>                     <span class="s">&quot;Incompatible magic value %u in class file %s&quot;</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">magic</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>对照上面的Class格式规范，首先获取magic标识(4字节)，然后判断它是不是等于CAFEBABE，如果不等于，则说明不是一个正确的Class文件格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Version numbers</span>
</span><span class='line'>  <span class="n">u2</span> <span class="n">minor_version</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="n">u2</span> <span class="n">major_version</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">is_supported_version</span><span class="o">(</span><span class="n">major_version</span><span class="o">,</span> <span class="n">minor_version</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">is_null</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="nl">Exceptions:</span><span class="o">:</span><span class="n">fthrow</span><span class="o">(</span>
</span><span class='line'>        <span class="n">THREAD_AND_LOCATION</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">vmSymbolHandles:</span><span class="o">:</span><span class="n">java_lang_UnsupportedClassVersionError</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Unsupported major.minor version %u.%u&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">major_version</span><span class="o">,</span>
</span><span class='line'>        <span class="n">minor_version</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ResourceMark</span> <span class="nf">rm</span><span class="o">(</span><span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>      <span class="nl">Exceptions:</span><span class="o">:</span><span class="n">fthrow</span><span class="o">(</span>
</span><span class='line'>        <span class="n">THREAD_AND_LOCATION</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">vmSymbolHandles:</span><span class="o">:</span><span class="n">java_lang_UnsupportedClassVersionError</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;%s : Unsupported major.minor version %u.%u&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">name</span><span class="o">-&gt;</span><span class="n">as_C_string</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">major_version</span><span class="o">,</span>
</span><span class='line'>        <span class="n">minor_version</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nullHandle</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获得Class文件的版本号，分为主版本号和次版本号。然后判断当前的JVM版本支不支持此版本的Class文件的解析。<br/>
接下来就是常量池了，每一个Class对象里面都有一个对应的常量池(ConstantPoolOop)对象，用来存放Class中的常量。看一下<code>ClassFileParser::parse_constant_pool(.)</code>中的部分代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">parse_constant_pool_entries</span><span class="o">(</span><span class="n">cp</span><span class="o">,</span> <span class="n">length</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>
调用parse_constant_pool_entries(&hellip;)对象来创建常量池项：<br/>
看一下<code>ClassFileParser::parse_constant_pool_entries(constantPoolHandle cp, int length, TRAPS)</code>中的部分代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">case</span> <span class="n">JVM_CONSTANT_Class</span> <span class="o">:</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// name_index, tag/access_flags</span>
</span><span class='line'>          <span class="n">u2</span> <span class="n">name_index</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>          <span class="n">cp</span><span class="o">-&gt;</span><span class="n">klass_index_at_put</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name_index</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量池对象constantPoolOop使用一个<code>typeArrayOop</code>来存储常量池项，回到上面的代码，首先判断剩余的字节数是否满足一个<code>JVM_CONSTANT_Class</code>要求的字节数(通过Class文件规范可知是3),然后是获得u2长度的字节数作为name的真实值在常量池中对应的index(Animal的常量池可以参考<a href="https://gist.github.com/zarue/0d5f83fa8458a9298b9d#file-3-animal-javap">Animal常量池</a>)。<br/>
再来看一个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">case</span> <span class="n">JVM_CONSTANT_Utf8</span> <span class="o">:</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// utf8_length</span>
</span><span class='line'>          <span class="n">u2</span>  <span class="n">utf8_length</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u2_fast</span><span class="o">();</span>
</span><span class='line'>          <span class="n">u1</span><span class="o">*</span> <span class="n">utf8_buffer</span> <span class="o">=</span> <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">get_u1_buffer</span><span class="o">();</span>
</span><span class='line'>          <span class="k">assert</span><span class="o">(</span><span class="n">utf8_buffer</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">,</span> <span class="s">&quot;null utf8 buffer&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// Got utf8 string, guarantee utf8_length+1 bytes, set stream position forward.</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">guarantee_more</span><span class="o">(</span><span class="n">utf8_length</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>  <span class="c1">// utf8 string, tag/access_flags</span>
</span><span class='line'>          <span class="n">cfs</span><span class="o">-&gt;</span><span class="n">skip_u1_fast</span><span class="o">(</span><span class="n">utf8_length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Before storing the symbol, make sure it&#39;s legal</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">_need_verify</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">verify_legal_utf8</span><span class="o">((</span><span class="n">unsigned</span> <span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">,</span> <span class="n">utf8_length</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">AnonymousClasses</span> <span class="o">&amp;&amp;</span> <span class="n">has_cp_patch_at</span><span class="o">(</span><span class="n">index</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Handle</span> <span class="n">patch</span> <span class="o">=</span> <span class="n">clear_cp_patch_at</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">guarantee_property</span><span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">is_instance</span><span class="o">(</span><span class="n">patch</span><span class="o">()),</span>
</span><span class='line'>                               <span class="s">&quot;Illegal utf8 patch at %d in class file %s&quot;</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">index</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">char</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">as_utf8_string</span><span class="o">(</span><span class="n">patch</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">// (could use java_lang_String::as_symbol instead, but might as well batch them)</span>
</span><span class='line'>            <span class="n">utf8_buffer</span> <span class="o">=</span> <span class="o">(</span><span class="n">u1</span><span class="o">*)</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>            <span class="n">utf8_length</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">strlen</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>          <span class="n">symbolOop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">SymbolTable:</span><span class="o">:</span><span class="n">lookup_only</span><span class="o">((</span><span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">,</span> <span class="n">utf8_length</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">names</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">*)</span><span class="n">utf8_buffer</span><span class="o">;</span>
</span><span class='line'>            <span class="n">lengths</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">utf8_length</span><span class="o">;</span>
</span><span class='line'>            <span class="n">indices</span><span class="o">[</span><span class="n">names_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hashValues</span><span class="o">[</span><span class="n">names_count</span><span class="o">++]</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">names_count</span> <span class="o">==</span> <span class="nl">SymbolTable:</span><span class="o">:</span><span class="n">symbol_alloc_batch_size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="nl">oopFactory:</span><span class="o">:</span><span class="n">new_symbols</span><span class="o">(</span><span class="n">cp</span><span class="o">,</span> <span class="n">names_count</span><span class="o">,</span> <span class="n">names</span><span class="o">,</span> <span class="n">lengths</span><span class="o">,</span> <span class="n">indices</span><span class="o">,</span> <span class="n">hashValues</span><span class="o">,</span> <span class="n">CHECK</span><span class="o">);</span>
</span><span class='line'>              <span class="n">names_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cp</span><span class="o">-&gt;</span><span class="n">symbol_at_put</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是Utf-8类型常量的处理方式，首先检查<code>SymbolTable</code>中是否存在该字符串，如果存在就返回已经存在的字符串对象。如果不存在，首先调用<code>oopFactory::new_symbols(...)</code>创建一个symbol对象，然后将它加入到SymbolTable中。这样就保证了同样的符号在jvm中仅仅会存在一个对象，可以大大节省存储空间。这里和之前讲的字符串池是一样的处理方式。 <br/>
常量池项解析完成之后，我们回到<code>ClassFileParser::parse_constant_pool(.)</code>方法，接下来是对转换完成的常量池项进行检查，如果全部检查通过，则返回该常量池对象。<br/>
然后再回到<code>ClassFileParser::parseClassFile(...)</code>方法。<br/>
接下来会接着解析<code>access_flag</code>,<code>this_class</code>,<code>super_class</code>等项,具体看源代码即可。
全都解析，验证完了之后，会创建一个描述这个类的对象即:instanceKlass来存储上面解析出来的各个项。instanceKlass的结构如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">instanceKlass</span> <span class="nl">layout:</span>
</span><span class='line'><span class="o">[</span><span class="n">header</span>                     <span class="o">]</span> <span class="n">klassOop</span>
</span><span class='line'><span class="o">[</span><span class="n">klass</span> <span class="n">pointer</span>              <span class="o">]</span> <span class="n">klassOop</span>
</span><span class='line'><span class="o">[</span><span class="n">C</span><span class="o">++</span> <span class="n">vtbl</span> <span class="n">pointer</span>           <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">subtype</span> <span class="n">cache</span>              <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">instance</span> <span class="n">size</span>              <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">java</span> <span class="n">mirror</span>                <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="kd">super</span>                      <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">access_flags</span>               <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">name</span>                       <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">first</span> <span class="n">subklass</span>             <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">next</span> <span class="n">sibling</span>               <span class="o">]</span> <span class="n">Klass</span>
</span><span class='line'><span class="o">[</span><span class="n">array</span> <span class="n">klasses</span>              <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">methods</span>                    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">local</span> <span class="n">interfaces</span>           <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">transitive</span> <span class="n">interfaces</span>      <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">number</span> <span class="n">of</span> <span class="n">implementors</span>     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">implementors</span>               <span class="o">]</span> <span class="n">klassOop</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">fields</span>                     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">constants</span>                  <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">class</span> <span class="nc">loader</span>               <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">protection</span> <span class="n">domain</span>          <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">signers</span>                    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">source</span> <span class="n">file</span> <span class="n">name</span>           <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">inner</span> <span class="n">classes</span>              <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">static</span> <span class="n">field</span> <span class="n">size</span>          <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">nonstatic</span> <span class="n">field</span> <span class="n">size</span>       <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="kd">static</span> <span class="n">oop</span> <span class="n">fields</span> <span class="n">size</span>     <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">nonstatic</span> <span class="n">oop</span> <span class="n">maps</span> <span class="n">size</span>    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">has</span> <span class="n">finalize</span> <span class="n">method</span>        <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">deoptimization</span> <span class="n">mark</span> <span class="n">bit</span>    <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">initialization</span> <span class="n">state</span>       <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">initializing</span> <span class="n">thread</span>        <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">Java</span> <span class="n">vtable</span> <span class="n">length</span>         <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">oop</span> <span class="n">map</span> <span class="n">cache</span> <span class="o">(</span><span class="n">stack</span> <span class="n">maps</span><span class="o">)</span> <span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="n">Java</span> <span class="n">vtable</span>             <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">vtable_len</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="kd">static</span> <span class="n">oop</span> <span class="n">fields</span>       <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">static_oop_fields_size</span>
</span><span class='line'><span class="o">[</span>         <span class="kd">static</span> <span class="n">non</span><span class="o">-</span><span class="n">oop</span> <span class="n">fields</span>   <span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">static_field_size</span> <span class="o">-</span> <span class="n">static_oop_fields_size</span>
</span><span class='line'><span class="o">[</span><span class="n">EMBEDDED</span> <span class="n">nonstatic</span> <span class="n">oop</span><span class="o">-</span><span class="n">map</span> <span class="n">blocks</span><span class="o">]</span> <span class="n">size</span> <span class="n">in</span> <span class="n">words</span> <span class="o">=</span> <span class="n">nonstatic_oop_map_size</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是初始化静态变量(准备阶段):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Initialize static fields</span>
</span><span class='line'>    <span class="n">this_klass</span><span class="o">-&gt;</span><span class="n">do_local_static_fields</span><span class="o">(&amp;</span><span class="n">initialize_static_field</span><span class="o">,</span> <span class="n">CHECK_</span><span class="o">(</span><span class="n">nullHandle</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后是一系验证，验证通过之后返回该对象。<br/>
最后再回到<code>jvm_define_class_common(..)</code>方法，看如下代码:<br/>
<code>(jclass) JNIHandles::make_local(env, Klass::cast(k)-&gt;java_mirror());</code><br/>
首先是把klassOop 转为Klass 对象，然后加入到当前线程中，然后转换为class对象返回。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 String 常量池 二]]></title>
    <link href="http://mallven.com//blog/2014/05/29/runtime-string-pool-2/"/>
    <updated>2014-05-29T20:58:21+08:00</updated>
    <id>http://mallven.com//blog/2014/05/29/runtime-string-pool-2</id>
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://mallven.com//blog/2014/05/27/runtime-string-pool-1">JVM 之 String 常量池 一</a>中我们了解到JVM中有一个叫String常量池的东西，String常量池到底是什么样？，又是怎样工作的呢？今天就来看一下。<br/>
做任何事情都要首先找一个入口。我们怎么才能找到常量池的入口呢？<br/>
我们首先想到String里面有个intern方法，可以在运行时向常量池中动态添加字符串。我们就从这个方法入手。<br/>
先看String 的intern的源代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">intern</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个native 方法，也就是这个方法不是用java实现的，要找到这个native 方法就要去<a href="http://openjdk.java.net/">JDK的源代码</a>中查找，它位于<code>openjdk/jdk/src/share/native/java/lang</code>目录中的<code>String.c</code>中。这个目录下还有许多其他java类中对应的native方法的实现，例如object类中的<code>hashCode</code>,<code>getClass</code>,<code>clone</code>等方法都在<code>Object.c</code>里面。 <br/>
String.c 中只有一个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="n">include</span> <span class="s">&quot;jvm.h&quot;</span>
</span><span class='line'><span class="err">#</span><span class="n">include</span> <span class="s">&quot;java_lang_String.h&quot;</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">Java_java_lang_String_intern</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="nf">JVM_InternString</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><code>Java_java_lang_String_intern</code> 就是String类intern 对应的native方法,然而<code>Java_java_lang_String_intern</code> 只是调用了<code>JVM_InternString</code>这个方法。<br/>
那么这个方法又在哪呢？<br/>
根据经验我们发现<code>String.c</code> 引入了<code>jvm.h</code>，去<code>jvm.h</code>中去看一下。<code>jvm.h</code> 位于<code>openjdk/jdk/src/share/javavm/export</code> 下面，<code>jvm.h</code>中正好定义了我们要找的<code>JVM_InternString</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* java.lang.String</span>
</span><span class='line'><span class="cm">* */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="nf">JVM_InternString</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jstring</span> <span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里只是定义,我们继续找这个定义对应的实现方法。相关实现在<code>jvm.cpp</code>中,<code>jvm.cpp</code> 位于：<code>openjdk/hotspot/src/share/vm/prims</code> 目录中。<code>jvm.cpp</code> 中<code>JVM_InternString</code>的具体实现如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JVM_ENTRY</span><span class="o">(</span><span class="n">jstring</span><span class="o">,</span> <span class="n">JVM_InternString</span><span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="o">,</span> <span class="n">jstring</span> <span class="n">str</span><span class="o">))</span>
</span><span class='line'><span class="n">JVMWrapper</span><span class="o">(</span><span class="s">&quot;JVM_InternString&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">JvmtiVMObjectAllocEventCollector</span> <span class="n">oam</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">str</span> <span class="o">==</span> <span class="n">NULL</span><span class="o">)</span> <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="n">oop</span> <span class="n">string</span> <span class="o">=</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">resolve_non_null</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">oop</span> <span class="n">result</span> <span class="o">=</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">intern</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="o">(</span><span class="n">jstring</span><span class="o">)</span> <span class="nl">JNIHandles:</span><span class="o">:</span><span class="n">make_local</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="n">JVM_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码我们可以看出，实际上<code>JVM_InternString</code> 又调用了<code>StringTable</code> 的 <code>intern</code> 方法。<code>StringTable</code> 是在<code>symbolTable.hpp</code>  中被声明的，代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">StringTable</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Hashtable</span><span class="o">&lt;</span><span class="n">oop</span><span class="o">,</span> <span class="n">mtSymbol</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">friend</span> <span class="kd">class</span> <span class="nc">VMStructs</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">// The string table</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">StringTable</span><span class="o">*</span> <span class="n">_the_table</span><span class="o">;</span>
</span><span class='line'><span class="o">.......</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先简单看一下<code>StringTable</code>这个类： <br/>
1.  继承了Hashtable&lt;oop, mtSymbol>，在Hashtable中，字符串被包装成HashtableEntry对象存储，同时为了解决hash碰撞的问题，HashtableEntry对象被设计为链表结构。最后HashTable使用数组_buckets来存储这些HashtableEntry。 <br/>
2. <code>static StringTable* _the_table</code> : StringTable的实例变量,在<code>create_table()</code> 中被实例化。<br/>
3. <code>lookup(...)</code>: 用来查找常量池中是否包含某个实例。<br/>
4. <code>basic_add(...)</code>: 往常量池中添加新实例。<br/>
5. <code>intern(...)</code>: 判断常量池中是否有某个实例，有则返回该实例，没有则调用<code>basic_add</code> 添加。</p>

<p>看一下intern方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">intern</span><span class="o">(</span><span class="n">Handle</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                        <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hashValue</span> <span class="o">=</span> <span class="n">hash_string</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">the_table</span><span class="o">()-&gt;</span><span class="n">hash_to_index</span><span class="o">(</span><span class="n">hashValue</span><span class="o">);</span>
</span><span class='line'>  <span class="n">oop</span> <span class="n">string</span> <span class="o">=</span> <span class="n">the_table</span><span class="o">()-&gt;</span><span class="n">lookup</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">hashValue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Found</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">string</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="k">return</span> <span class="n">string</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Otherwise, add to symbol to table</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">the_table</span><span class="o">()-&gt;</span><span class="n">basic_add</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">hashValue</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第3行:首先调用hash_string()计算字符串的hash值。hash值计算规则:<code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code> 例如：<code>“a”.hashCode() = 97</code>。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">hash_string</span><span class="o">(</span><span class="n">jchar</span><span class="o">*</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">unsigned</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">len</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span><span class="o">*</span><span class="n">h</span> <span class="o">+</span> <span class="o">(</span><span class="n">unsigned</span><span class="o">)</span> <span class="o">*</span><span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第4行:把hash值转换为数组的下标。转换规则：<code>hash % table_size</code>。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">hash_to_index</span><span class="o">(</span><span class="n">unsigned</span> <span class="kt">int</span> <span class="n">full_hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">full_hash</span> <span class="o">%</span> <span class="n">_table_size</span><span class="o">;</span>
</span><span class='line'>    <span class="k">assert</span><span class="o">(</span><span class="n">h</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">_table_size</span><span class="o">,</span> <span class="s">&quot;Illegal hash value&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第5行:检查该字符串是否存在，如果存在，就返回。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">lookup</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                        <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">HashtableEntry</span><span class="o">*</span> <span class="n">l</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">(</span><span class="n">index</span><span class="o">);</span> <span class="n">l</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">;</span> <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">hash</span><span class="o">()</span> <span class="o">==</span> <span class="n">hash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">equals</span><span class="o">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">literal</span><span class="o">(),</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">literal</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明:<br/>
1.首先从数组_buckets获得当前下标对应的HashtableEntry。 <br/>
2.判断该entry的hash值和字符串值是否都相等(是不是很眼熟)，如果都相等则返回该entry中存储的字符串对象。<br/>
3.如果(2)条件不成立则继续循环next entry。</p>

<p>第11行:调用StringTable的<code>basic_add(...)</code>方法将字符串添加到常量池。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oop</span> <span class="nl">StringTable:</span><span class="o">:</span><span class="n">basic_add</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">Handle</span> <span class="n">string_or_null</span><span class="o">,</span> <span class="n">jchar</span><span class="o">*</span> <span class="n">name</span><span class="o">,</span>
</span><span class='line'>                           <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">unsigned</span> <span class="kt">int</span> <span class="n">hashValue</span><span class="o">,</span> <span class="n">TRAPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">debug_only</span><span class="o">(</span><span class="n">StableMemoryChecker</span> <span class="n">smc</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span> <span class="o">*</span> <span class="n">sizeof</span><span class="o">(</span><span class="n">name</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
</span><span class='line'>  <span class="k">assert</span><span class="o">(!</span><span class="nl">Universe:</span><span class="o">:</span><span class="n">heap</span><span class="o">()-&gt;</span><span class="n">is_in_reserved</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">||</span> <span class="nl">GC_locker:</span><span class="o">:</span><span class="n">is_active</span><span class="o">(),</span>
</span><span class='line'>         <span class="s">&quot;proposed name of symbol must be stable&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Handle</span> <span class="n">string</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// try to reuse the string if possible</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">string_or_null</span><span class="o">.</span><span class="na">is_null</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">string_or_null</span><span class="o">()-&gt;</span><span class="n">is_perm</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="n">string_or_null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">create_tenured_from_unicode</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">CHECK_NULL</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Allocation must be done before grapping the SymbolTable_lock lock</span>
</span><span class='line'>  <span class="n">MutexLocker</span> <span class="nf">ml</span><span class="o">(</span><span class="n">StringTable_lock</span><span class="o">,</span> <span class="n">THREAD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">assert</span><span class="o">(</span><span class="nl">java_lang_String:</span><span class="o">:</span><span class="n">equals</span><span class="o">(</span><span class="n">string</span><span class="o">(),</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">),</span>
</span><span class='line'>         <span class="s">&quot;string must be properly initialized&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Since look-up was done lock-free, we need to check if another</span>
</span><span class='line'>  <span class="c1">// thread beat us in the race to insert the symbol.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">oop</span> <span class="n">test</span> <span class="o">=</span> <span class="n">lookup</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">len</span><span class="o">,</span> <span class="n">hashValue</span><span class="o">);</span> <span class="c1">// calls lookup(u1*, int)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">test</span> <span class="o">!=</span> <span class="n">NULL</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Entry already added</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HashtableEntry</span><span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">new_entry</span><span class="o">(</span><span class="n">hashValue</span><span class="o">,</span> <span class="n">string</span><span class="o">());</span>
</span><span class='line'>  <span class="n">add_entry</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">entry</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">string</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第12行:创建一个String对象,创建过程可以参考<code>openjdk/hotspot/src/share/vm/classfile/javaClasses.cpp</code>中<code>java_lang_String</code>类的<code>create_tenured_from_unicode</code>方法。后面要单独讲对象的创建过程，这里就不展开了，后面文章写完了，会把链接贴过来。<br/>
第30行:创建一个HashtableEntry对象。<br/>
第31行: 将新创建的Sting对象添加到常量池<code>_buckets</code>中。代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inline</span> <span class="kt">void</span> <span class="nl">BasicHashtable:</span><span class="o">:</span><span class="n">add_entry</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">BasicHashtableEntry</span><span class="o">*</span> <span class="n">entry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">entry</span><span class="o">-&gt;</span><span class="n">set_next</span><span class="o">(</span><span class="n">bucket</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>  <span class="n">_buckets</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">set_entry</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>  <span class="o">++</span><span class="n">_number_of_entries</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明:<br/>
1.首先从<code>_buckets</code>数组获得index位置的HashtableEntry 记为oldEntry。 <br/>
2.将oldEntry设置为entry的<code>_next</code>(HashtableEntry设计为链表结构,就是用在这里)<br/>
3.将entry设置到_buckets的index位置</p>

<h3>总结:</h3>

<p>String常量池对应的数据结构就是StringTable对象,也就是一个Hashtable结构。hashtable的结构是数组+链表。hashtable一直持有字符串的引用，因此字符串池中的对象不会被垃圾收集器回收掉。<br/>
Hashtable 的结构看起来应该是这样的：<br/>
<img src="http://mallven.com//images/blog/2014-06/20140602-hashtable.png" alt="Hasttable" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM 之 String 常量池 一]]></title>
    <link href="http://mallven.com//blog/2014/05/27/runtime-string-pool-1/"/>
    <updated>2014-05-27T20:30:20+08:00</updated>
    <id>http://mallven.com//blog/2014/05/27/runtime-string-pool-1</id>
    <content type="html"><![CDATA[<h4>1.Sting对象创建方式</h4>

<p>JAVA里面创建字符串有两种方式：<br/>
1. 通过字符串常量方式:String a = &ldquo;a&rdquo;;<br/>
2. 通过new 关键字创建:new String(&ldquo;a&rdquo;);</p>

<p>但是这两种创建字符串的方式有很大的不同。<br/>
1. 使用第一种方式，jvm首先会检查字符串常量池中是否存在了这个常量，如果存在，就返回池中的实例引用。如果不存在，就会实例化一个字符串并放到池中,然后返回引用。<br/>
2. 使用第二种方式，则直接分配到heap中，不指向字符串常量池中的任何对象，和字符串常量池没有关系。</p>

<h4>2.下面来看一个例子: <a href="https://gist.github.com/zarue/25e0afedb33de86da650">本例子Gist地址</a></h4>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringConstantTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">str_0_static</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">str_0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">StringConstantTest</span> <span class="n">sct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//同package对象</span>
</span><span class='line'>      <span class="n">StringConstantTest1</span> <span class="n">sct1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest1</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//不同package对象</span>
</span><span class='line'>      <span class="n">StringConstantTest2</span> <span class="n">sct2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringConstantTest2</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">str0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;ab&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">+</span><span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str4</span> <span class="o">=</span> <span class="n">str0</span> <span class="o">+</span> <span class="n">str1</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str5</span> <span class="o">=</span> <span class="n">str0</span> <span class="o">+</span> <span class="s">&quot;b&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str6</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str7</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;ab&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">str8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str4</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和成员变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct1.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct1</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==sct2.str_0: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">sct2</span><span class="o">.</span><span class="na">str_0</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和静态变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==str_0_static： &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">str_0_static</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==StringConstantTest1.str_0_static: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">StringConstantTest1</span><span class="o">.</span><span class="na">str_0_static</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str0==StringConstantTest2.str_0_static: &quot;</span><span class="o">+(</span><span class="n">str0</span> <span class="o">==</span> <span class="n">StringConstantTest2</span><span class="o">.</span><span class="na">str_0_static</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str3: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str3</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str4: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str4</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str5: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str5</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//局部变量和对象</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str6: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str6</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str7: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str7</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str8: &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str8</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//对象和对象 intern</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str2</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str7.intern()==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str7</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str8.intern()==str6.intern(): &quot;</span><span class="o">+(</span><span class="n">str8</span><span class="o">.</span><span class="na">intern</span><span class="o">()</span> <span class="o">==</span> <span class="n">str6</span><span class="o">.</span><span class="na">intern</span><span class="o">()));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//对象和对象equals</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str6.equals(str7): &quot;</span><span class="o">+</span><span class="n">str6</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">str7</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;str2.equals(str6): &quot;</span><span class="o">+</span><span class="n">str2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">str6</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">StringConstantTest1</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">str_0</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">str_0_static</span> <span class="o">=</span> <span class="s">&quot;a&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://mallven.com//images/blog/2014-05/20140528-string-pool-1.png" alt="结果" /></p>

<h4>分析(下面所指行号均为源代码行号):</h4>

<ol>
<li><p><strong>24-31</strong>行的结果说明:<br/>
只要是字符串常量方式创建的对象，无论是类变量，实例变量，还是局部变量，无论是不是位于同一个包中。都是共享字符串常量池中的同一个实例。</p></li>
<li><p><strong>34</strong>行为true, 是因为:<br/>
String str3 = &ldquo;a&rdquo;+&ldquo;b&rdquo;; 是因为“a” 和 “b” 都是常量，编译器在编译阶段会直接优化为String str3 = &ldquo;ab&#8221;。<br/>
可以通过javap 反编译class字节码来看一下:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">30</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">32</span><span class="o">:</span> <span class="n">ldc</span> <span class="err">#</span><span class="mi">35</span> <span class="c1">// String ab</span>
</span><span class='line'><span class="mi">34</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">36</span><span class="o">:</span> <span class="n">ldc</span> <span class="err">#</span><span class="mi">35</span> <span class="c1">// String ab </span>
</span></code></pre></td></tr></table></div></figure>


<p>上面第36行就是<code>String str3 = "a"+"b";</code>对应的字节码。这里可以看出&#8221;a&#8221;+&ldquo;b&#8221;已经被优化为&#8221;ab&#8221;了。</p>

<ol>
<li><strong>35</strong>行为false, 是因为:<br/>
String str4 = str0 + str1; 是因为str0 和 str1 都是变量，需要运行期才能转换为对应的值，而且String 会把变量的+操作，转换成StringBuilder的append操作,然后返回一个新的String对象。<br/>
再看一下字节码文件:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">40</span><span class="o">:</span> <span class="k">new</span> <span class="err">#</span><span class="mi">37</span> <span class="c1">// class java/lang/StringBuilder</span>
</span><span class='line'><span class="mi">43</span><span class="o">:</span> <span class="n">dup</span>
</span><span class='line'><span class="mi">44</span><span class="o">:</span> <span class="n">aload</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">46</span><span class="o">:</span> <span class="n">invokestatic</span> <span class="err">#</span><span class="mi">39</span> <span class="c1">// Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;</span>
</span><span class='line'><span class="mi">49</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">45</span> <span class="c1">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
</span><span class='line'><span class="mi">52</span><span class="o">:</span> <span class="n">aload</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">54</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">48</span> <span class="c1">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
</span><span class='line'><span class="mi">57</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">52</span> <span class="c1">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
</span><span class='line'><span class="mi">60</span><span class="o">:</span> <span class="n">astore</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上面的字节码可以看出<code>String str4 = str0 + str1;</code>  相当于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stringbuilder</span><span class="o">(</span><span class="n">str0</span><span class="o">);</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>再看一下StringBuilder的toString()方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// Create a copy, don&#39;t share the array</span>
</span><span class='line'><span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由以上代码可已看出，toString()是new了一个String对象返回，所以是直接分配在heap上。因此结果为false。</p>

<ol>
<li><strong>39-41</strong>行为false: 是因为:<br/>
str6,str7,str8 都是通过new 创建，数据分配到heap上面，不指向字符串常量池中的任何对象，所以三个对象均不同，引用自然不同，因此比较结果均为false。</li>
<li><p><strong>44-46</strong>行为true: 是因为:<br/>
当一个String实例str调用intern()方法时，Java查找字符串常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用。所以上面均为true。</p></li>
<li><p><strong>49-50</strong>行为true: 是因为:<br/>
String的值是用char数组保存的，equals 是比较的两个String对象中的char数组值是否一致，所以两个结果为true。<br/>
看一下String的equals方法:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">anObject</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">anotherString</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">anObject</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">anotherString</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">v1</span><span class="o">[]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">v2</span><span class="o">[]</span> <span class="o">=</span> <span class="n">anotherString</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">n</span><span class="o">--</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">v1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">v2</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>                            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>下一节<a href="http://mallven.com//blog/2014/05/29/runtime-string-pool-2/">JVM 之 String常量池二</a>将会详细讲一下字符串池的结构以及原理</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Layout of Java Object]]></title>
    <link href="http://mallven.com//blog/2014/05/22/jvm-object-structure/"/>
    <updated>2014-05-22T14:09:15+08:00</updated>
    <id>http://mallven.com//blog/2014/05/22/jvm-object-structure</id>
    <content type="html"><![CDATA[<h2>1. What do a Java object looks like in the memory?</h2>

<p>Java Object represents as a series of bytes sorted by some  <em>specific rules</em>(If you do not familiar with the physical memory structure, please refer:<a href="http://mallven.com//blog/2014/05/21/cpu-and-memory/">CPU Addressing and Physical Memory Structure</a>).<br/>
But what is the definition of these <em>specific rules</em> in JVM？<br/>
In hotspot，there are two types of object：normal object and array，the memory layout of each object consists of three parts: <code>object head, fields, padding</code>, normal object&rsquo;s header contains <code>MARK WORD, CLASS POINTER</code>, but array&rsquo;s object header contains <code>MARK WORD, CLASS POINTER, ARRAY LENGTH</code>. (Figure 1) <br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-object-arrayObject-structure.png" alt="Object Layout" /></p>

<!--more-->


<h4>1.This is a table about the details of object layout</h4>

<table>
<thead>
<tr>
<th align="center">title</th>
<th align="center">length</th>
<th align="left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">  Mark Word  </td>
<td align="center">  32/64bit  </td>
<td align="left"> used to store object&rsquo;s hashcode and lock type</td>
</tr>
<tr>
<td align="center">  Class Pointer </td>
<td align="center">  32/64bit  </td>
<td align="left">  point to the class of this object </td>
</tr>
<tr>
<td align="center">  Array length  </td>
<td align="center">  32/64bit  </td>
<td align="left">  length of array（only exists in array object）</td>
</tr>
</tbody>
</table>


<p>This is a table of the details of a 32-bit JVM&rsquo;s  <code>MARK WORD</code> with none lock,it contains <code>HashCode</code>,<code>Object Generation</code>,<code>Lock Type</code>.</p>

<table>
<thead>
<tr>
<th align="center">Lock Status</th>
<th align="center">25 bit</th>
<th align="left"> 4 bit</th>
<th align="left">1 bit(biased lock)</th>
<th align="left">2 bit(lock type)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> no lock</td>
<td align="center">hashCode</td>
<td align="left">object generation</td>
<td align="left">0</td>
<td align="left">01</td>
</tr>
</tbody>
</table>


<p>Datas represented by <code>MARK WORD</code> will be different if <code>Lock Status</code> is different, <code>MARK WORD</code> can change to represent four type datas:<code>Lightweight Lock</code>, <code>Heavyweight Lock</code>, <code>GC Mrak</code>, <code>Biased Lock</code>. This article only talk about object layout, If you want to know more about <code>Object Lock</code>, please refer to <a href="http://ifeve.com/java-synchronized/">Java SE1.6 ynchronized</a></p>

<h4>2.Instance Data：</h4>

<p>Instance data includes instance variables of  itself  and instance variables extend from its parents.  the order of these variables are effected by jvm <code>FieldsAllocationStyle</code> and their orders in source code.  The default allocation strategy in HotSpot is longs/doubles, ints, shorts/chars, bytes/booleans, oops(Orginary Object Pointers). From these  allocation stragegies we can find that those fields has same width will be allocated  together. With this precondation, fields extends from parents will display before child&rsquo;s  autogeneic variables, but if variable <code>Compactfields</code> is set to true(defalut is true), child&rsquo;s variables with narrow width will be insert into parents&#8217; variable&rsquo;s gap.</p>

<h4>3.Padding Data：</h4>

<p>Padding data is not necessary, They are only placeholders. HotSpot&rsquo;s <code>Automatic Memory Management System</code> requires the object&rsquo;s size must integral multiple of 8 bytes, object header is exactly integral multiple of 8 bytes(1 times or 2 times), So it will need padding data if instance data could not align as 8 bytes.</p>

<h2>2. Observe object layout in run-time</h2>

<p>Note:In this experiment we will use  <code>ServiceAbility Agent</code>(a debug tool provide by HostSpot) to observe object layout in run-time. If you don&rsquo;t familiar with it,please refer to :<a href="http://rednaxelafx.iteye.com/blog/1847971">Use HSDB to explore HotSpot VM&rsquo;s run-time data</a><br/>
Environment:Ubuntu 14.04 32bit</p>

<h4>1.a sample class：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Long</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>main function contains three objects ：<code>Integer</code>,<code>Long</code>,<code>Boolean</code>, Now we use SA to inspect each object&rsquo;s structure and size：<br/>
1.runing the program above，add a breakpoint at  <code>System.out.println("")</code><br/>
2.use command <code>JPS</code> to query JVM&rsquo;s PID:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-objectsize-jps.png" alt="jps" />  <br/>
3.start <code>SA</code>(HSDB)<br/>
<code>sudo java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.HSDB</code><br/>
4.attach PID 3813,open <code>Stack Memory View</code>，Figure 1:</p>

<p><img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory.png" alt="memory inspector" /></p>

<p>This red rectangle shows us the three objects we decliared in the  main function,the left hand is the addresses of objects in JVM  and the  right hand is the notes about these addresses.<br/>
The addresses of these three objects are ：</p>

<blockquote><p>Integer i &nbsp;&nbsp;&nbsp; 0xa0159410<br/>
Long l  &nbsp;&nbsp;&nbsp; 0xa0159520<br/>
Boolean b &nbsp;&nbsp;&nbsp;0xa0159650</p></blockquote>

<p>We will inspect <code>Integer i</code> first,select menu:<code>Tool--&gt;Inspect</code>,input <code>0xa0159410</code> in the textfield to get this object，Figure 2:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-integer.png" alt="Layout of Integer" /></p>

<p>Use the same way to get <code>Long l</code> object，Figure 3：<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-long.png" alt="Layout of Long" /></p>

<p>also <code>Boolean b</code> ,Figure 4:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-boolean.png" alt="Layout of Boolean" /></p>

<p>Conclusion:Object instance data  only contains autogeneic instance variables and variables extend from its&#8217; parents，In the source code of <code>Integer,Long,Boolean</code> we can know that these three classes only have one <code>value</code> variable，so except  <em>mark(MARK_WORD),</em>metadata._klass，we only can find a <code>value</code> variable in the memory inspector.</p>

<h4>2.a complex class:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">age</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Long</span> <span class="n">height</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Boolean</span> <span class="n">sex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
The memory layout of <code>Animal</code> object, Figure 5:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-animal.png" alt="Memory layout of Animal" /></p>

<p>From <code>figure 5</code> we can find that three Objects are all  in Animal&rsquo;s memory layout.</p>

<h4>3.a class with extended variables:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tiger</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Double</span> <span class="n">weight</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tiger</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HSDB shows us the result，Figure 6:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-tiger.png" alt="Memory Layout of Tiger" /></p>

<p>From figure 6 we can find that variables extends from parents will stored in children&rsquo;s class too.</p>

<h4>4.Tiger with array:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tiger</span> <span class="kd">extends</span> <span class="n">Animal</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Double</span> <span class="n">wight</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Integer</span><span class="o">[]</span> <span class="n">childs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>      <span class="n">Tiger</span> <span class="n">tiger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tiger</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span> 
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the result ,Figure 7:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-array.png" alt="Memory layout of array" /></p>

<p>It is weird that there is no length variable for childs array!  It is wrong about  we said before?</p>

<p>use <code>inspect</code> command to inspect this object&rsquo;s size:<br/>
<code>inspect 0xa01ba470</code> Figure 8：<br/>
<img src="http://mallven.com//images/blog/2014-05/20140524-hsdb-memory-array-size.png" alt="array size" /></p>

<p>We can do some inferences :<br/>
1. if this object has no length variable，the size should be：size=4+4=8.<br/>
2. if this object has length variable，the size should be ：size=4+4+4+4(padding)=16, correspond with the size showd in Figure 8, so the length variable is exists，but why it does not display on the panel ，i think it would be a bug of SA plugin.</p>

<p>Conclusion: SA plugin can show the Run-Time data of JVM, It is a great tool to help us to learn the implements of  JVM.</p>

<p>Bibliographies:<br/>
<a href="http://rednaxelafx.iteye.com/blog/1847971">http://rednaxelafx.iteye.com/blog/1847971</a><br/>
<a href="http://ifeve.com/java-synchronized/">http://ifeve.com/java-synchronized/</a><br/>
<a href="http://icyfenix.iteye.com/blog/1145044">http://icyfenix.iteye.com/blog/1145044</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPU Addressing and Physical Memory Structure]]></title>
    <link href="http://mallven.com//blog/2014/05/21/cpu-and-memory/"/>
    <updated>2014-05-21T20:35:18+08:00</updated>
    <id>http://mallven.com//blog/2014/05/21/cpu-and-memory</id>
    <content type="html"><![CDATA[<h4>What we are talking in this article are concept model, differ with the  specific implement</h4>

<h3>1. Several concepts of CPU</h3>

<ol>
<li>Data Bus：Data Bus are used to transfer data between CPU and other components(eg:memory)。</li>
<li>Data Bus Width：Data Bus Width represent the number of bits that  Registers can hold, namely:bits of CPU can hold. for example an &ldquo;32-bit CPU&rdquo; or an &ldquo;64-bit CPU&rdquo;. Number of bits of CPU can hold could not represent CPU&rsquo;s addressing abilities.</li>
<li>Address Bus：Address Bus is used to specify a physical address。</li>
<li>Address Bus Width: The width of the Address Bus determines the amount of memory the system can address.For example, a system with a 32-bit address bus can address 0-2<sup>32</sup>-1（0x00000000-0xFFFFFFFF) locations. If each memory address holds one byte, the addressable memory space  is 4GiB.</li>
<li>Control Bus: Control Bus are used to transmit instructions to other components</li>
</ol>


<p>There are many articles about BUS  on the internet ，For example：</p>

<ul>
<li><a href="http://share.onlinesjtu.com/mod/tab/view.php?id=253">Structures of CPU Bus</a></li>
<li><a href="http://my.oschina.net/u/158589/blog/70813">Width of CPU, Addressing abilities, Instructions，Width of Register，Width of Operation System</a></li>
</ul>


<!--more-->


<h3>2. Several concepts of memory</h3>

<ol>
<li>Memory cell: The memory cell is the fundamental building block of computer memory,every memory cell can store 1 bit.</li>
<li>Memory unit: The memory unit consists of memory cells，each memory unit can store one byte or one word, but how many byte a word represent? it depend on the specific implemention.</li>
<li>Memory unit address：the index of memory nuit，alway a hexadecimal number. CPU use this index to locate the data it needs.</li>
<li>Memory device：Memory device is a physical component of computer consists of memory units.</li>
</ol>


<p>There are many articles about the details of memory on the internet，For example：</p>

<ul>
<li><a href="http://www.baike.com/wiki/%E5%AD%98%E5%82%A8%E5%99%A8">Memory</a></li>
</ul>


<p>Conclusion: Comprehend the structures of CPU and Memory can help us to dispel the confusions about  how our program works on the computer and understand the principle of CPU addressing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX vim display Chinese as garbled characters]]></title>
    <link href="http://mallven.com//blog/2014/05/18/vim-chinese-error/"/>
    <updated>2014-05-18T22:05:24+08:00</updated>
    <id>http://mallven.com//blog/2014/05/18/vim-chinese-error</id>
    <content type="html"><![CDATA[<h3>Envrionment:</h3>

<ol>
<li>OSX 10.9.2 English</li>
<li>VIM 7.3</li>
</ol>


<h3>Problems:</h3>

<ol>
<li>Can display Chinese characters in file</li>
<li>Can not display Chinese characters inputed from screen</li>
<li>Add encoding settings to .vimrc does not work</li>
</ol>


<h3>Solution:</h3>

<p>find  <code>Terminal--&gt;Preferences--&gt;Settings--&gt;Advanced--&gt;Escape non-ASCII input with Control-V</code> and uncheck this option。</p>

<!--more-->


<p>If you have tried many other approach to solve garbled characters problem like this, you should try this soution.  <br/>
Figure:<br/>
<img src="http://mallven.com//images/blog/2014-05/20140519-1-vim.png" alt="Figure" /></p>
]]></content>
  </entry>
  
</feed>
